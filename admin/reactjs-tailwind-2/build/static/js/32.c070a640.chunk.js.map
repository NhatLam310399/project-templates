{"version":3,"sources":["designs/Table/index.tsx","common/hooks/usePage.tsx","components/AlertDialog/index.tsx","designs/TextArea/styles.tsx","designs/TextArea/index.tsx","../node_modules/@material-ui/core/esm/DialogTitle/DialogTitle.js","../node_modules/@material-ui/core/esm/DialogContentText/DialogContentText.js","pages/dashboard/PostConfiguraiton/CareerLevel/components/Dialog/index.tsx","pages/dashboard/PostConfiguraiton/CareerLevel/index.tsx"],"names":["TableCustom","className","data","columns","headerElement","sizePerPage","onPageChange","page","isRemote","totalSize","loading","onClickRow","onTableChange","handleChangePage","e","nextPage","handleTableChange","type","rowEvents","onClick","rowIndex","totalPage","Math","ceil","length","bootstrap4","keyField","search","props","baseProps","bordered","wrapperClasses","pagination","paginationFactory","hideSizePerPage","custom","remote","filter","sort","count","onChange","name","memo","usePage","initialPage","Number","history","useHistory","useState","state","setState","useCallback","newPage","push","location","pathname","AlertDialog","ButtonMenu","title","content","onConfirm","note","React","open","setOpen","handleClose","onClose","maxWidth","fullWidth","PaperProps","style","backgroundColor","colors","white","borderRadius","padding","id","innerClassName","primary","useStyles","makeStyles","inputFieldHidden","opacity","position","formHelperText","color","error","TextArea","label","value","required","helpInputText","errorMessage","t","placeholder","rest","validators","classes","randomId","text","setText","isError","setIsError","useEffect","TextField","width","multiline","rows","variant","event","currentValue","target","FormHelperText","errorMessages","validatorListener","isValid","DialogTitle","ref","children","_props$disableTypogra","disableTypography","other","_objectWithoutProperties","_extends","clsx","root","Typography","component","withStyles","margin","flex","DialogContentText","marginBottom","CareerLevelDialog","editField","dispatch","useDispatch","inputFields","setInputFields","getAllCategoryLevel1","filterCategoryLevel1","Dialog","payload","_id","jobLevelInput","updateJobLevel","createJobLevel","size","Input","validates","description","CareerLevel","language","i18n","useSelector","newsConfig","allJobLevel","results","allPosition","totalCount","actionSuccess","common","getQueryFromLocation","setPage","getAllJobLevelAPI","setupBreadcrumb","resetAction","getAllJobLevel","setBreadcrumb","renderAction","record","SVG","deleteJobLevel","handleDelete","useMemo","dataField","formatter","_","Button","Table"],"mappings":"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","file":"static/js/32.c070a640.chunk.js","sourcesContent":["/**\n * @note read the document in /src/docs/designs/Table.md.\n * You should read it in gitlab.\n */\n\nimport React, { memo } from \"react\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport BootstrapTable, { ColumnDescription } from \"react-bootstrap-table-next\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport SVG from \"designs/SVG\";\nimport { ITableProps } from \"./interfaces\";\n\nexport type IColumns = ColumnDescription<any, any>[];\n\nconst TableCustom: React.FC<ITableProps> = ({\n    className = \"\",\n    data,\n    columns,\n    headerElement,\n    sizePerPage = 10,\n    onPageChange,\n    page = 1,\n    isRemote = false,\n    totalSize = 0,\n    loading = true,\n    onClickRow,\n    onTableChange,\n}) => {\n    const handleChangePage = (\n        e: React.ChangeEvent<unknown>,\n        nextPage: number,\n    ) => {\n        onPageChange && onPageChange(nextPage);\n    };\n\n    const handleTableChange = (\n        type: string,\n        { page, sizePerPage }: Record<any, any>,\n    ) => {\n        const newPage = page - 1;\n\n        onTableChange && onTableChange(newPage);\n    };\n\n    // const handleEmptyData = () => {\n    //     return (\n    //         <div className=\"empty-data\">\n    //             <SVG name=\"common/empty-data\" />\n    //         </div>\n    //     );\n    // };\n\n    const rowEvents = {\n        onClick: (rowIndex: number) => {\n            onClickRow && onClickRow(rowIndex);\n        },\n    };\n\n    const totalPage = Math.ceil(totalSize / sizePerPage);\n\n    return !loading && data?.length === 0 ? (\n        <div className=\"flex items-center justify-center w-full h-full mt-10 empty-data\">\n            <SVG name=\"common/empty-data\" />\n        </div>\n    ) : (\n        <div className={`custom-table__container ${className}`}>\n            <ToolkitProvider\n                bootstrap4\n                keyField=\"id\"\n                data={data}\n                columns={columns}\n                search\n            >\n                {(props: any) => {\n                    return (\n                        <>\n                            <div>{headerElement}</div>\n                            <BootstrapTable\n                                {...props.baseProps}\n                                bordered={false}\n                                wrapperClasses=\"table-responsive col-span-12 overflow-auto lg:overflow-visible font-sfpro\"\n                                rowEvents={rowEvents}\n                                pagination={paginationFactory({\n                                    hideSizePerPage: true,\n                                    sizePerPage,\n                                    page,\n                                    totalSize,\n                                    custom: true,\n                                })}\n                                remote={\n                                    isRemote && {\n                                        pagination: true,\n                                        filter: false,\n                                        sort: false,\n                                    }\n                                }\n                                onTableChange={handleTableChange}\n                            />\n                            {totalSize !== 0 && (\n                                <div className=\"flex justify-end mt-3 pagination-wrap\">\n                                    <Pagination\n                                        page={page}\n                                        count={totalPage}\n                                        onChange={handleChangePage}\n                                    />\n                                </div>\n                            )}\n                        </>\n                    );\n                }}\n            </ToolkitProvider>\n        </div>\n    );\n};\n\nexport default memo(TableCustom);\n","import { useCallback, useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\ntype IQueryPage = string | string[] | null;\n\nexport const usePage = (\n    page: IQueryPage,\n): [number, (newPage: number) => void] => {\n    const initialPage = page ? Number(page) : 1;\n    const history = useHistory();\n    const [state, setState] = useState(Number(initialPage));\n    const setPage = useCallback((newPage: number) => {\n        setState(newPage);\n        history.push(`${history.location.pathname}?page=${newPage}`);\n    }, []);\n\n    return [state, setPage];\n};\n","import React from \"react\";\nimport Button from \"designs/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { colors } from \"common/styles/colors\";\n\ninterface IAlertDialogProps {\n    ButtonMenu: React.ReactElement;\n    title: string;\n    content?: string | undefined;\n    onConfirm?: (data: any) => void;\n    data?: any;\n    className?: string;\n    note?: string;\n}\n\nconst AlertDialog: React.FC<IAlertDialogProps> = props => {\n    const {\n        ButtonMenu,\n        title = \"\",\n        content = \"\",\n        onConfirm,\n        data,\n        className = \"\",\n        note = \"\",\n    } = props;\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleConfirm = (e: React.MouseEvent<HTMLButtonElement>) => {\n        onConfirm && onConfirm(data);\n        setOpen(false);\n    };\n\n    return (\n        <div className={`${className}`}>\n            <button\n                type=\"button\"\n                className=\"block w-full\"\n                onClick={handleClickOpen}\n            >\n                {ButtonMenu}\n            </button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                maxWidth=\"sm\"\n                fullWidth\n                PaperProps={{\n                    style: {\n                        backgroundColor: colors.white,\n                        borderRadius: \"0px\",\n                        padding: \"40px\",\n                    },\n                }}\n            >\n                <DialogTitle className=\"p-0 mb-2\" id=\"alert-dialog-title\">\n                    <h1 className=\"font-bold leading-none text-xxl font-sfpro\">\n                        {title}\n                    </h1>\n                </DialogTitle>\n                <DialogContent className=\"p-0 mb-3\">\n                    <DialogContentText id=\"alert-dialog-description\">\n                        <span className=\"block text-lg leading-none text-black font-sfpro\">\n                            {content}\n                        </span>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions className=\"flex flex-col w-full gap-2 p-0 phone:flex-row\">\n                    <Button\n                        className=\"w-full phone:w-auto\"\n                        innerClassName=\"py-1 px-3.5 h-4 font-normal normal-case border-none\"\n                        onClick={handleClose}\n                        type=\"button\"\n                    >\n                        Huỷ bỏ\n                    </Button>\n                    <Button\n                        className=\"w-full phone:w-auto\"\n                        primary\n                        innerClassName=\"py-1 px-3.5 h-4 font-normal normal-case\"\n                        onClick={handleConfirm}\n                        type=\"submit\"\n                    >\n                        Đồng ý\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n};\n\nexport default AlertDialog;\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport { colors } from \"common/styles/colors\";\n\nexport const useStyles = makeStyles({\n    inputFieldHidden: {\n        opacity: 0,\n        position: \"absolute\",\n    },\n    formHelperText: {\n        color: colors.error,\n    },\n});\n","import React, { useState, useMemo, useEffect } from \"react\";\nimport { TextValidator } from \"react-material-ui-form-validator\";\nimport TextField, { BaseTextFieldProps } from \"@material-ui/core/TextField\";\nimport { randomId } from \"common/functions\";\nimport { t } from \"language\";\nimport { FormHelperText } from \"@material-ui/core\";\nimport { useStyles } from \"./styles\";\n\ninterface ITextAreaProps extends BaseTextFieldProps {\n    label: string;\n    name: string;\n    value?: string;\n    onChange?: (value: string, name?: string) => void;\n    required?: boolean;\n    errorMessage?: string;\n    helpInputText?: string;\n    placeholder?: string;\n}\n\nconst TextArea: React.FC<ITextAreaProps> = props => {\n    const {\n        className = \"\",\n        label,\n        name,\n        value = \"\",\n        onChange,\n        required,\n        helpInputText = \"\",\n        errorMessage = t(\"common.text-area-placeholder\"),\n        placeholder = t(\"common.text-area-placeholder\"),\n        ...rest\n    } = props;\n    const validators = required ? [\"required\"] : [];\n    const classes = useStyles();\n\n    const id = randomId();\n    const [text, setText] = useState(value);\n    const [isError, setIsError] = useState(false);\n\n    useEffect(() => {\n        if (value) {\n            setText(value);\n        } else {\n            setText(\"\");\n        }\n    }, [value]);\n\n    const handleValidate = (isValid: boolean) => {\n        if (isValid) {\n            isError && setIsError(false);\n        } else {\n            !isError && setIsError(true);\n        }\n    };\n\n    const handleChange = (event: any) => {\n        const currentValue = event.target?.value || \"\";\n        if (name) {\n            onChange && onChange(currentValue, name);\n        } else {\n            onChange && onChange(currentValue);\n        }\n        setText(currentValue);\n    };\n\n    return (\n        <>\n            <div className={`text-validator-wrapper ${className}`}>\n                {label && (\n                    <p className=\"text-lg font-medium flex items-center mb-0.5\">\n                        {label}\n                        {required && <span className=\"text-error\">*</span>}\n                        {helpInputText && (\n                            <span className=\"text-sm text-body ml-0.5 \">\n                                {helpInputText}\n                            </span>\n                        )}\n                    </p>\n                )}\n                <TextField\n                    placeholder={placeholder}\n                    className=\"bg-white\"\n                    id={id}\n                    style={{\n                        width: \"100%\",\n                    }}\n                    multiline\n                    rows={8}\n                    variant=\"outlined\"\n                    name={name}\n                    value={text}\n                    onChange={handleChange}\n                    {...(rest as any)}\n                />\n                {isError && (\n                    <FormHelperText\n                        className=\"font-sfpro\"\n                        error\n                        variant=\"outlined\"\n                    >\n                        {errorMessage}\n                    </FormHelperText>\n                )}\n            </div>\n            {required && (\n                <TextValidator\n                    value={text}\n                    name={id}\n                    validators={validators}\n                    errorMessages={[errorMessage]}\n                    className={`${classes.inputFieldHidden} -z-1`}\n                    validatorListener={handleValidate}\n                />\n            )}\n        </>\n    );\n};\n\nexport default TextArea;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    margin: 0,\n    padding: '16px 24px',\n    flex: '0 0 auto'\n  }\n};\nvar DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), disableTypography ? children : /*#__PURE__*/React.createElement(Typography, {\n    component: \"h2\",\n    variant: \"h6\"\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the children won't be wrapped by a typography component.\n   * For instance, this can be useful to render an h4 instead of the default h2.\n   */\n  disableTypography: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogTitle'\n})(DialogTitle);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    marginBottom: 12\n  }\n};\nvar DialogContentText = /*#__PURE__*/React.forwardRef(function DialogContentText(props, ref) {\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    component: \"p\",\n    variant: \"body1\",\n    color: \"textSecondary\",\n    ref: ref\n  }, props));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContentText.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogContentText'\n})(DialogContentText);","import React, { useState, useEffect } from \"react\";\nimport { t } from \"language\";\nimport {\n    ICategoryLevel2Input,\n    ICategoryLv2,\n    ICreateJobLevel,\n    IUpdateJobLevel,\n} from \"common/formatTypes\";\nimport Dialog, { DialogTitle } from \"components/Dialog\";\nimport Input from \"designs/Input\";\n\nimport { useDispatch } from \"react-redux\";\n\nimport TextArea from \"designs/TextArea\";\nimport {\n    createJobLevel,\n    getAllCategoryLevel1,\n    updateJobLevel,\n} from \"redux/actions/newsConfig\";\n\ninterface IJobSeekerDialogProps {\n    ButtonMenu: React.ReactElement;\n    editField?: ICategoryLv2;\n    className?: string;\n}\n\nconst CareerLevelDialog: React.FC<IJobSeekerDialogProps> = ({\n    ButtonMenu,\n    editField,\n    className,\n}) => {\n    const dispatch = useDispatch();\n    const [inputFields, setInputFields] = useState<ICategoryLevel2Input>({});\n\n    useEffect(() => {\n        dispatch(getAllCategoryLevel1({ filterCategoryLevel1: {} }));\n    }, []);\n\n    const handleSubmit = () => {\n        if (editField) {\n            const payload: IUpdateJobLevel = {\n                id: editField?._id || \"\",\n                jobLevelInput: inputFields,\n            };\n            dispatch(updateJobLevel(payload));\n        } else {\n            const payload: ICreateJobLevel = {\n                jobLevelInput: inputFields,\n            };\n            dispatch(createJobLevel(payload));\n        }\n    };\n\n    const handleChangeInput = (\n        // using for all input have value with type below:\n        value = \"\",\n        name?: string,\n    ) => {\n        name && setInputFields({ ...inputFields, [name]: value });\n    };\n\n    const handleClose = () => {\n        setInputFields({});\n    };\n\n    return (\n        <Dialog\n            ButtonMenu={ButtonMenu}\n            onConfirm={handleSubmit}\n            onClose={handleClose}\n            className={className}\n            size=\"sm\"\n        >\n            <DialogTitle className=\"mb-3\">\n                {editField\n                    ? t(\"job.edit-career-level\")\n                    : t(\"job.add-career-level\")}\n            </DialogTitle>\n\n            <div className=\"w-full\">\n                <div className=\"flex flex-col gap-2\">\n                    <Input\n                        placeholder={t(\"job.position-placeholder\")}\n                        label={t(\"job.position\")}\n                        value={editField?.name}\n                        name=\"name\"\n                        onChange={handleChangeInput}\n                        validates={{\n                            required: {\n                                errorMessage: t(\n                                    \"job.validate-required-position\",\n                                ),\n                            },\n                        }}\n                    />\n                    <TextArea\n                        label={t(\"job.description\")}\n                        name=\"description\"\n                        value={editField?.description}\n                        onChange={value =>\n                            setInputFields({\n                                ...inputFields,\n                                description: value,\n                            })\n                        }\n                    />\n                </div>\n            </div>\n        </Dialog>\n    );\n};\n\nexport default CareerLevelDialog;\n","/* eslint-disable react/destructuring-assignment */\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\nimport i18n, { t } from \"language\";\n\nimport AlertDialog from \"components/AlertDialog\";\n\nimport {\n    IRootState,\n    ICategoryLv2,\n    IJobLevel,\n    IDeleteJobLevel,\n} from \"common/formatTypes\";\nimport { usePage } from \"common/hooks/usePage\";\nimport { getQueryFromLocation } from \"common/functions/\";\n\nimport SVG from \"designs/SVG\";\nimport Button from \"designs/Button\";\nimport Table, { IColumns } from \"designs/Table\";\n\nimport { deleteJobLevel, getAllJobLevel } from \"redux/actions/newsConfig\";\nimport { resetAction } from \"redux/actions/common\";\nimport { setBreadcrumb } from \"redux/actions/_config\";\n\nimport Dialog from \"./components/Dialog\";\n\nconst SIZE_PER_PAGE = 10;\n\nconst CareerLevel: React.FC<RouteComponentProps> = ({ location }) => {\n    const { language } = i18n;\n\n    const {\n        allJobLevel: {\n            results: allPosition = [],\n            totalCount = 0,\n            loading = true,\n        } = {},\n    } = useSelector((state: IRootState) => state.newsConfig);\n\n    const dispatch = useDispatch();\n\n    const { actionSuccess } = useSelector((state: IRootState) => state.common);\n\n    const [page, setPage] = usePage(getQueryFromLocation(location)?.page);\n\n    useEffect(() => {\n        getAllJobLevelAPI();\n        setupBreadcrumb();\n    }, []);\n\n    useEffect(() => {\n        getAllJobLevelAPI();\n    }, [page]);\n\n    useEffect(() => {\n        if (actionSuccess) {\n            dispatch(resetAction());\n\n            getAllJobLevelAPI();\n        }\n    }, [actionSuccess]);\n\n    const getAllJobLevelAPI = (text = \"\") => {\n        dispatch(getAllJobLevel());\n    };\n\n    const setupBreadcrumb = () => {\n        dispatch(\n            setBreadcrumb([\n                {\n                    name: t(\"breadcrumb.career-level\"),\n                },\n            ]),\n        );\n    };\n\n    const handleDelete = (record: IJobLevel) => {\n        const payload: IDeleteJobLevel = {\n            id: record?._id || \"\",\n        };\n        dispatch(deleteJobLevel(payload));\n    };\n\n    const handleChangePage = useCallback((nextPage: number) => {\n        setPage(nextPage);\n    }, []);\n\n    const renderAction = (record: ICategoryLv2) => {\n        return (\n            <div className=\"flex justify-end space-x-1\">\n                <AlertDialog\n                    ButtonMenu={<SVG name=\"common/delete\" width=\"20\" />}\n                    title={t(\"job.delete-career-level\")}\n                    content={`${t(\"job.delete-career-level-content\")}?`}\n                    onConfirm={() => handleDelete(record)}\n                />\n                <Dialog\n                    ButtonMenu={<SVG name=\"common/edit\" width=\"20\" />}\n                    editField={record}\n                />\n            </div>\n        );\n    };\n\n    const columns: IColumns = useMemo(\n        () => [\n            {\n                text: t(\"job.position\"),\n                dataField: \"name\",\n            },\n            {\n                text: t(\"job.description\"),\n                dataField: \"description\",\n            },\n            {\n                text: t(\"common.table-action\"),\n                dataField: \"actions\",\n                formatter: (_: string, record: ICategoryLv2) =>\n                    renderAction(record),\n            },\n        ],\n        [language, page],\n    );\n\n    return (\n        <div>\n            <h1 className=\"mb-2 font-bold leading-none text-xxl font-sfpro\">\n                {t(\"breadcrumb.career-level\")}\n            </h1>\n            <div className=\"flex items-center justify-end w-full max-w-full gap-2 pb-3\">\n                <Dialog\n                    ButtonMenu={\n                        <Button\n                            primary\n                            innerClassName=\"py-1.5 h-4 text-lg font-medium font-sfpro normal-case h-full\"\n                            type=\"submit\"\n                        >\n                            {t(\"job.add-btn-career-level\")}\n                        </Button>\n                    }\n                    className=\"w-full max-full phone:w-25\"\n                />\n            </div>\n            <Table\n                data={allPosition}\n                columns={columns}\n                totalSize={0}\n                sizePerPage={SIZE_PER_PAGE}\n                page={page}\n                loading={loading}\n                onPageChange={handleChangePage}\n            />\n        </div>\n    );\n};\nexport default CareerLevel;\n"],"sourceRoot":""}