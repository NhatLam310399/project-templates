{"version":3,"sources":["designs/Table/index.tsx","components/AlertDialog/index.tsx","../node_modules/@material-ui/core/esm/DialogTitle/DialogTitle.js","../node_modules/@material-ui/core/esm/DialogContentText/DialogContentText.js","designs/Editor/index.tsx","constants/aspect/index.ts","constants/typeByCodes/index.tsx","pages/dashboard/Setting/StaticPage/components/Dialog/index.tsx","pages/dashboard/Setting/StaticPage/index.tsx"],"names":["TableCustom","className","data","columns","headerElement","sizePerPage","onPageChange","page","isRemote","totalSize","loading","onClickRow","onTableChange","handleChangePage","e","nextPage","handleTableChange","type","rowEvents","onClick","rowIndex","totalPage","Math","ceil","length","bootstrap4","keyField","search","props","baseProps","bordered","wrapperClasses","pagination","paginationFactory","hideSizePerPage","custom","remote","filter","sort","count","onChange","name","memo","AlertDialog","ButtonMenu","title","content","onConfirm","note","React","useState","open","setOpen","handleClose","onClose","maxWidth","fullWidth","PaperProps","style","backgroundColor","colors","white","borderRadius","padding","id","innerClassName","primary","DialogTitle","ref","children","classes","_props$disableTypogra","disableTypography","other","_objectWithoutProperties","_extends","clsx","root","Typography","component","variant","withStyles","margin","flex","DialogContentText","color","marginBottom","FontAttributor","Quill","import","fontNames","map","font","toLowerCase","replace","whitelist","register","Size","modules","toolbar","align","list","size","Editor","initValue","label","disabled","required","errorMessage","t","validators","htmlEditor","setHtmlEditor","isError","setIsError","useEffect","randomId","error","value","errorMessages","validatorListener","isValid","ASPECT_RATIO_16_9","STATIC_PAGE","ADS_BY_IMAGE","ADS_BY_CODE","StaticPageDialog","isEdit","editField","listTypes","useSelector","state","types","listPages","generalSetting","pages","results","optionTypes","setOptionTypes","dispatch","useDispatch","formField","setFormField","typeSelected","setTypeSelected","getAllTypesAPI","getAllStaticPageAPI","renderTypes","initTypes","draftList","item","listId","_id","index","indexOf","splice","push","getTypesByCode","code","getAllPages","filterPages","handleChangeInput","Dialog","input","customImageSizeUpload","CUSTOM_SIZE_UPLOAD_PAGE_IMAGE","payload","fieldsToUpdate","updatePages","createPagesInput","createPages","undefined","Input","validates","url","Select","options","onSelectOption","option","SingleImageUploader","image","small","aspect","StaticPage","setPage","totalCount","actionSuccess","common","setupBreadcrumb","setBreadcrumb","resetAction","useCallback","renderAction","record","SVG","width","removePages","handleDelete","useMemo","text","dataField","headerStyle","formatter","src","default","medium","NoImage","alt","cell","Button","Table"],"mappings":"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","file":"static/js/31.0f24278b.chunk.js","sourcesContent":["/**\n * @note read the document in /src/docs/designs/Table.md.\n * You should read it in gitlab.\n */\n\nimport React, { memo } from \"react\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport BootstrapTable, { ColumnDescription } from \"react-bootstrap-table-next\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport SVG from \"designs/SVG\";\nimport { ITableProps } from \"./interfaces\";\n\nexport type IColumns = ColumnDescription<any, any>[];\n\nconst TableCustom: React.FC<ITableProps> = ({\n    className = \"\",\n    data,\n    columns,\n    headerElement,\n    sizePerPage = 10,\n    onPageChange,\n    page = 1,\n    isRemote = false,\n    totalSize = 0,\n    loading = true,\n    onClickRow,\n    onTableChange,\n}) => {\n    const handleChangePage = (\n        e: React.ChangeEvent<unknown>,\n        nextPage: number,\n    ) => {\n        onPageChange && onPageChange(nextPage);\n    };\n\n    const handleTableChange = (\n        type: string,\n        { page, sizePerPage }: Record<any, any>,\n    ) => {\n        const newPage = page - 1;\n\n        onTableChange && onTableChange(newPage);\n    };\n\n    // const handleEmptyData = () => {\n    //     return (\n    //         <div className=\"empty-data\">\n    //             <SVG name=\"common/empty-data\" />\n    //         </div>\n    //     );\n    // };\n\n    const rowEvents = {\n        onClick: (rowIndex: number) => {\n            onClickRow && onClickRow(rowIndex);\n        },\n    };\n\n    const totalPage = Math.ceil(totalSize / sizePerPage);\n\n    return !loading && data?.length === 0 ? (\n        <div className=\"flex items-center justify-center w-full h-full mt-10 empty-data\">\n            <SVG name=\"common/empty-data\" />\n        </div>\n    ) : (\n        <div className={`custom-table__container ${className}`}>\n            <ToolkitProvider\n                bootstrap4\n                keyField=\"id\"\n                data={data}\n                columns={columns}\n                search\n            >\n                {(props: any) => {\n                    return (\n                        <>\n                            <div>{headerElement}</div>\n                            <BootstrapTable\n                                {...props.baseProps}\n                                bordered={false}\n                                wrapperClasses=\"table-responsive col-span-12 overflow-auto lg:overflow-visible font-sfpro\"\n                                rowEvents={rowEvents}\n                                pagination={paginationFactory({\n                                    hideSizePerPage: true,\n                                    sizePerPage,\n                                    page,\n                                    totalSize,\n                                    custom: true,\n                                })}\n                                remote={\n                                    isRemote && {\n                                        pagination: true,\n                                        filter: false,\n                                        sort: false,\n                                    }\n                                }\n                                onTableChange={handleTableChange}\n                            />\n                            {totalSize !== 0 && (\n                                <div className=\"flex justify-end mt-3 pagination-wrap\">\n                                    <Pagination\n                                        page={page}\n                                        count={totalPage}\n                                        onChange={handleChangePage}\n                                    />\n                                </div>\n                            )}\n                        </>\n                    );\n                }}\n            </ToolkitProvider>\n        </div>\n    );\n};\n\nexport default memo(TableCustom);\n","import React from \"react\";\nimport Button from \"designs/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { colors } from \"common/styles/colors\";\n\ninterface IAlertDialogProps {\n    ButtonMenu: React.ReactElement;\n    title: string;\n    content?: string | undefined;\n    onConfirm?: (data: any) => void;\n    data?: any;\n    className?: string;\n    note?: string;\n}\n\nconst AlertDialog: React.FC<IAlertDialogProps> = props => {\n    const {\n        ButtonMenu,\n        title = \"\",\n        content = \"\",\n        onConfirm,\n        data,\n        className = \"\",\n        note = \"\",\n    } = props;\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleConfirm = (e: React.MouseEvent<HTMLButtonElement>) => {\n        onConfirm && onConfirm(data);\n        setOpen(false);\n    };\n\n    return (\n        <div className={`${className}`}>\n            <button\n                type=\"button\"\n                className=\"block w-full\"\n                onClick={handleClickOpen}\n            >\n                {ButtonMenu}\n            </button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                maxWidth=\"sm\"\n                fullWidth\n                PaperProps={{\n                    style: {\n                        backgroundColor: colors.white,\n                        borderRadius: \"0px\",\n                        padding: \"40px\",\n                    },\n                }}\n            >\n                <DialogTitle className=\"p-0 mb-2\" id=\"alert-dialog-title\">\n                    <h1 className=\"font-bold leading-none text-xxl font-sfpro\">\n                        {title}\n                    </h1>\n                </DialogTitle>\n                <DialogContent className=\"p-0 mb-3\">\n                    <DialogContentText id=\"alert-dialog-description\">\n                        <span className=\"block text-lg leading-none text-black font-sfpro\">\n                            {content}\n                        </span>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions className=\"flex flex-col w-full gap-2 p-0 phone:flex-row\">\n                    <Button\n                        className=\"w-full phone:w-auto\"\n                        innerClassName=\"py-1 px-3.5 h-4 font-normal normal-case border-none\"\n                        onClick={handleClose}\n                        type=\"button\"\n                    >\n                        Huỷ bỏ\n                    </Button>\n                    <Button\n                        className=\"w-full phone:w-auto\"\n                        primary\n                        innerClassName=\"py-1 px-3.5 h-4 font-normal normal-case\"\n                        onClick={handleConfirm}\n                        type=\"submit\"\n                    >\n                        Đồng ý\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n};\n\nexport default AlertDialog;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    margin: 0,\n    padding: '16px 24px',\n    flex: '0 0 auto'\n  }\n};\nvar DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), disableTypography ? children : /*#__PURE__*/React.createElement(Typography, {\n    component: \"h2\",\n    variant: \"h6\"\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the children won't be wrapped by a typography component.\n   * For instance, this can be useful to render an h4 instead of the default h2.\n   */\n  disableTypography: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogTitle'\n})(DialogTitle);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    marginBottom: 12\n  }\n};\nvar DialogContentText = /*#__PURE__*/React.forwardRef(function DialogContentText(props, ref) {\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    component: \"p\",\n    variant: \"body1\",\n    color: \"textSecondary\",\n    ref: ref\n  }, props));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContentText.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogContentText'\n})(DialogContentText);","import { FormControl, FormHelperText } from \"@material-ui/core\";\nimport { randomId } from \"common/functions\";\nimport React, { useEffect, useState } from \"react\";\nimport { TextValidator } from \"react-material-ui-form-validator\";\nimport ReactQuill, { Quill } from \"react-quill\";\nimport { t } from \"language\";\nimport \"react-quill/dist/quill.snow.css\";\n\nconst FontAttributor = Quill.import(\"attributors/class/font\");\nconst fonts = [\"SF Pro Text\"];\nconst fontNames = fonts.map(font => font.toLowerCase().replace(/\\s/g, \"-\"));\nFontAttributor.whitelist = fontNames;\nQuill.register(FontAttributor, true);\n\nconst Size = Quill.import(\"attributors/style/size\");\nconst sizes = [\"14px\", \"16px\", \"18px\", \"22px\"];\nSize.whitelist = sizes;\nQuill.register(Size, true);\n\nconst modules = {\n    toolbar: [\n        [\"bold\", \"italic\", \"underline\"],\n        [{ align: \"\" }, { align: \"center\" }, { align: \"right\" }],\n        [{ list: \"ordered\" }],\n        [\"link\", \"image\"],\n        [{ size: [\"14px\", \"16px\", \"18px\", \"22px\"] }],\n    ],\n};\n\ninterface IEditorProps {\n    initValue?: string;\n    className?: string;\n    label?: string;\n    name?: string;\n    onChange: (text: string, name: string) => void;\n    disabled?: boolean;\n    required?: boolean;\n    errorMessage?: string;\n}\n\nconst Editor: React.FC<IEditorProps> = props => {\n    const {\n        initValue = \"\",\n        onChange,\n        className = \"\",\n        label,\n        name = \"\",\n        disabled = false,\n        required = false,\n        errorMessage = t(\"common.select-required\"),\n    } = props;\n    const validators = required ? [\"required\"] : [];\n\n    const [htmlEditor, setHtmlEditor] = useState<string>(\"\");\n    const [isError, setIsError] = useState(false);\n\n    useEffect(() => {\n        if (initValue) {\n            setHtmlEditor(initValue);\n        } else {\n            setHtmlEditor(\"\");\n        }\n    }, [initValue]);\n\n    const handlerChange = (value: string) => {\n        setHtmlEditor(value);\n        onChange(value, name);\n    };\n\n    const id = randomId();\n    const handleValidate = (isValid: boolean) => {\n        if (isValid) {\n            isError && setIsError(false);\n        } else {\n            !isError && setIsError(true);\n        }\n    };\n\n    return (\n        <>\n            <div className={`quill-wrap ${className}`}>\n                <FormControl\n                    variant=\"outlined\"\n                    className=\"w-full\"\n                    error={isError}\n                    disabled={disabled}\n                >\n                    <span className=\"font-medium text-lg block mb-0.5\">\n                        {label}\n                    </span>\n                    <ReactQuill\n                        modules={modules}\n                        value={htmlEditor}\n                        onChange={handlerChange}\n                    />\n                    {isError && (\n                        <FormHelperText\n                            className=\"font-sfpro\"\n                            error\n                            variant=\"outlined\"\n                        >\n                            {errorMessage}\n                        </FormHelperText>\n                    )}\n                </FormControl>\n            </div>\n            {required && (\n                <TextValidator\n                    value={htmlEditor}\n                    name={id}\n                    className=\"hidden\"\n                    errorMessages={[errorMessage]}\n                    validators={validators}\n                    validatorListener={handleValidate}\n                />\n            )}\n        </>\n    );\n};\n\nexport default Editor;\n","export const ASPECT_RATIO_16_9 = 16 / 9;\n","export const STATIC_PAGE = \"STATIC_PAGE\";\nexport const ADS_BY_IMAGE = \"ADS_BY_IMAGE\";\nexport const ADS_BY_CODE = \"ADS_BY_CODE\";\n","import React, { useRef, useState, useEffect } from \"react\";\nimport {\n    IPages,\n    ICreatePagesInput,\n    IUpdatePagesInput,\n    IRootState,\n    ITypes,\n    IPageInput,\n} from \"common/formatTypes\";\nimport Dialog, { DialogTitle } from \"components/Dialog\";\nimport Input from \"designs/Input\";\nimport Editor from \"designs/Editor\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Select from \"designs/Select\";\nimport SingleImageUploader from \"components/SingleImageUploader\";\n\nimport { getTypesByCode } from \"redux/actions/types\";\nimport { STATIC_PAGE } from \"constants/typeByCodes\";\nimport { CUSTOM_SIZE_UPLOAD_PAGE_IMAGE } from \"constants/image\";\nimport {\n    createPages,\n    updatePages,\n    getAllPages,\n} from \"redux/actions/generalSetting\";\nimport { t } from \"language\";\nimport { ASPECT_RATIO_16_9 } from \"constants/aspect\";\nimport { IOption } from \"designs/Select/interface\";\nimport { showNotification } from \"redux/actions/notification\";\n\ninterface IStaticPageDialogProps {\n    ButtonMenu: React.ReactElement;\n    isEdit?: boolean;\n    editField?: IPages | null;\n    className?: string;\n}\n\nconst StaticPageDialog: React.FC<IStaticPageDialogProps> = props => {\n    const { ButtonMenu, isEdit, editField, className } = props;\n    const { listTypes } = useSelector((state: IRootState) => state.types);\n    const {\n        pages: { results: listPages },\n    } = useSelector((state: IRootState) => state.generalSetting);\n    const [optionTypes, setOptionTypes] = useState<IOption[]>([]);\n    const dispatch = useDispatch();\n\n    const [formField, setFormField] = useState<IPageInput>({});\n    const [typeSelected, setTypeSelected] = useState<ITypes>();\n\n    useEffect(() => {\n        getAllTypesAPI();\n        getAllStaticPageAPI();\n    }, []);\n\n    useEffect(() => {\n        if (editField) {\n            renderTypes(editField?.type);\n        }\n    }, [listPages, listTypes]);\n\n    const renderTypes = (initTypes?: ITypes) => {\n        const draftList = [...listTypes];\n        listPages.map(item => {\n            const listId = draftList.map(item => item._id);\n            const index = listId.indexOf(item.type?._id);\n            if (index !== -1) {\n                draftList.splice(index, 1);\n            }\n        });\n        initTypes && draftList.push(initTypes); //add type of page when edit\n        setOptionTypes(draftList);\n    };\n    const getAllTypesAPI = () => {\n        dispatch(\n            getTypesByCode({\n                code: STATIC_PAGE,\n            }),\n        );\n    };\n\n    const getAllStaticPageAPI = () => {\n        dispatch(\n            getAllPages({\n                filterPages: {},\n            }),\n        );\n    };\n\n    const handleSubmit = () => {\n        const input: IPageInput = {\n            ...formField,\n            customImageSizeUpload: CUSTOM_SIZE_UPLOAD_PAGE_IMAGE,\n        };\n\n        if (editField) {\n            const payload: IUpdatePagesInput = {\n                id: editField._id!,\n                fieldsToUpdate: input,\n            };\n\n            dispatch(updatePages(payload));\n        } else {\n            const payload: ICreatePagesInput = {\n                createPagesInput: input,\n            };\n            dispatch(createPages(payload));\n        }\n    };\n\n    const handleChangeInput = (\n        // using for all input have value with type below:\n        value = \"\",\n        name?: string,\n    ) => {\n        name && setFormField({ ...formField, [name]: value });\n    };\n    const handleSelectedOption = (option: ITypes) => {\n        setTypeSelected(option);\n        setFormField(state => ({\n            ...state,\n            type: option._id,\n        }));\n    };\n    const handleClose = () => {\n        setFormField({});\n        if (!editField) {\n            setTypeSelected(undefined);\n        }\n    };\n    return (\n        <Dialog\n            ButtonMenu={ButtonMenu}\n            onConfirm={handleSubmit}\n            onClose={handleClose}\n            className={className}\n            size=\"lg\"\n        >\n            <DialogTitle className=\"mb-3 text-black text-xxl\">\n                {isEdit\n                    ? t(\"staticPage.title-edit\")\n                    : t(\"staticPage.title-add\")}\n            </DialogTitle>\n            <div className=\"grid grid-cols-1 gap-2 laptop:grid-cols-2 text-\">\n                <div className=\"flex flex-col gap-2\">\n                    <Input\n                        label={t(\"staticPage.title\")}\n                        name=\"name\"\n                        value={editField?.name}\n                        onChange={handleChangeInput}\n                        validates={{\n                            required: {\n                                errorMessage: t(\"staticPage.null.page\"),\n                            },\n                        }}\n                    />\n                    <Input\n                        label={t(\"staticPage.link\")}\n                        name=\"url\"\n                        value={editField?.url}\n                        onChange={handleChangeInput}\n                        validates={{\n                            required: {\n                                errorMessage: t(\"staticPage.null.link\"),\n                            },\n                        }}\n                    />\n                    <Select\n                        label={t(\"staticPage.type\")}\n                        value={typeSelected?.name || editField?.type?.name}\n                        options={optionTypes}\n                        required\n                        errorMessage={t(\"staticPage.null.validate\")}\n                        onSelectOption={handleSelectedOption}\n                    />\n                </div>\n                <div className=\"flex flex-col gap-2\">\n                    <div>\n                        <p className=\"text-lg font-medium text-black mb-0.5\">\n                            {t(\"staticPage.image\")}\n                        </p>\n                        <SingleImageUploader\n                            image={editField?.image?.small}\n                            className=\"\"\n                            onChange={image => {\n                                setFormField(state => ({\n                                    ...state,\n                                    image,\n                                }));\n                            }}\n                            aspect={ASPECT_RATIO_16_9}\n                        />\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"mt-2\">\n                <p className=\"text-lg font-medium\">\n                    {t(\"staticPage.content\")}{\" \"}\n                    <span className=\"text-lg font-medium text-error\">*</span>\n                </p>\n                <Editor\n                    className=\"mt-1\"\n                    initValue={editField?.content}\n                    onChange={content => {\n                        setFormField(state => ({\n                            ...state,\n                            content,\n                        }));\n                    }}\n                    required\n                    errorMessage={t(\"staticPage.null.content\")}\n                />\n            </div>\n        </Dialog>\n    );\n};\n\nexport default StaticPageDialog;\n","/* eslint-disable react/destructuring-assignment */\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Table, { IColumns } from \"designs/Table\";\nimport AlertDialog from \"components/AlertDialog\";\nimport { IRootState } from \"redux/reducers\";\nimport { resetAction } from \"redux/actions/common\";\nimport { setBreadcrumb } from \"redux/actions/_config\";\nimport { ICustomSizeImages, IPages, ITypes } from \"common/formatTypes\";\nimport { getAllPages, removePages } from \"redux/actions/generalSetting\";\nimport { t } from \"language\";\n\nimport Button from \"designs/Button\";\nimport SVG from \"designs/SVG\";\nimport NoImage from \"assets/svg/common/img-skeleton.svg\";\nimport Dialog from \"./components/Dialog\";\n\nconst SIZE_PER_PAGE = 10;\n\nconst StaticPage: React.FC = () => {\n    const [page, setPage] = useState<number>(1);\n    const dispatch = useDispatch();\n\n    const {\n        pages: { results: listPages, totalCount = 0, loading = true },\n    } = useSelector((state: IRootState) => state.generalSetting);\n\n    const { actionSuccess } = useSelector((state: IRootState) => state.common);\n\n    useEffect(() => {\n        setupBreadcrumb();\n    }, []);\n\n    const setupBreadcrumb = () => {\n        dispatch(\n            setBreadcrumb([\n                {\n                    name: t(\"breadcrumb.static_page\"),\n                },\n            ]),\n        );\n    };\n\n    useEffect(() => {\n        getAllStaticPageAPI();\n    }, [page]);\n\n    useEffect(() => {\n        if (actionSuccess) {\n            getAllStaticPageAPI();\n            dispatch(resetAction());\n        }\n    }, [actionSuccess]);\n\n    const getAllStaticPageAPI = () => {\n        dispatch(\n            getAllPages({\n                filterPages: {},\n            }),\n        );\n    };\n\n    const handleDelete = (record: IPages) => {\n        const payload = {\n            id: record._id!,\n        };\n        dispatch(removePages(payload));\n    };\n    const handleChangePage = useCallback((nextPage: number) => {\n        setPage(nextPage);\n    }, []);\n\n    const renderAction = (record: IPages) => {\n        return (\n            <div className=\"flex justify-end gap-2\">\n                <AlertDialog\n                    ButtonMenu={<SVG name=\"common/delete\" width=\"20\" />}\n                    title={t(\"staticPage.title-delete\")}\n                    content={t(\"staticPage.content-delete\")}\n                    onConfirm={() => handleDelete(record)}\n                />\n                <Dialog\n                    isEdit\n                    editField={record}\n                    ButtonMenu={<SVG name=\"common/edit\" width=\"20\" />}\n                />\n            </div>\n        );\n    };\n    const columns: IColumns = useMemo(\n        () => [\n            {\n                text: t(\"staticPage.image-title\"),\n                dataField: \"image\",\n                headerStyle: () => ({\n                    width: \"20%\",\n                }),\n                formatter: (image: ICustomSizeImages) => (\n                    <div className=\"\">\n                        <img\n                            src={\n                                image?.small ||\n                                image?.default ||\n                                image.medium ||\n                                NoImage\n                            }\n                            className=\"object-cover w-12 h-7\"\n                            alt=\"thumbnail\"\n                        />\n\n                        {/* this is the trick for width img in mobile */}\n                        <div className=\"w-20 laptop:w-0\" />\n                    </div>\n                ),\n            },\n            {\n                text: t(\"staticPage.title\"),\n                dataField: \"name\",\n                headerStyle: () => ({\n                    width: \"20%\",\n                }),\n            },\n            {\n                text: t(\"staticPage.link\"),\n                dataField: \"url\",\n            },\n            {\n                text: t(\"staticPage.type\"),\n                dataField: \"type\",\n                formatter: (type: ITypes) => <div>{type?.name}</div>,\n            },\n            {\n                text: t(\"staticPage.action\"),\n                dataField: \"actions\",\n                formatter: (cell: null, record: IPages) => renderAction(record),\n            },\n        ],\n        [],\n    );\n\n    return (\n        <div className=\"\">\n            <h1 className=\"mb-2 font-bold leading-none text-xxl font-sfpro\">\n                {t(\"breadcrumb.static_page\")}\n            </h1>\n            <div className=\"flex flex-col items-center justify-end w-full max-w-full gap-2 pb-3 phone:flex-row\">\n                <Dialog\n                    ButtonMenu={\n                        <Button\n                            primary\n                            innerClassName=\"py-1.5 h-4 text-lg font-medium font-sfpro normal-case h-full\"\n                            type=\"submit\"\n                        >\n                            {t(\"staticPage.title-add\")}\n                        </Button>\n                    }\n                    className=\"w-full max-w-full phone:w-25\"\n                />\n            </div>\n            <Table\n                data={listPages}\n                columns={columns}\n                totalSize={totalCount}\n                loading={loading}\n                page={page}\n                onPageChange={handleChangePage}\n                sizePerPage={SIZE_PER_PAGE}\n            />\n        </div>\n    );\n};\nexport default StaticPage;\n"],"sourceRoot":""}