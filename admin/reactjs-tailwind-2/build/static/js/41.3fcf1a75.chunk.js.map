{"version":3,"sources":["designs/ButtonNormal/index.tsx","pages/dashboard/employerManagement/Account/index.tsx"],"names":["DesignButton","props","history","useHistory","to","className","primary","children","rest","style","padding","onClick","setTimeout","push","ActionAccountPage","state","location","useSelector","listUser","users","results","loading","useState","editField","setEditField","dispatch","useDispatch","setUsers","formFieldAccount","setFormFieldAccount","common","actionSuccess","type","setType","useEffect","getAllUser","setupBreadcrumb","resetAction","PATH","MANAGE_EMPLOYER","ADD","COMPANY","setBreadcrumb","name","t","a","getAllUserService","result","handleChangeAccountInput","value","onSubmit","listPhoneNumber","map","user","phoneNumber","listEmail","email","includes","String","showNotification","message","title","input","Object","keys","length","payload","id","_id","updateUserInput","updateUserByAdmin","createUserInput","permission","createUserByAdmin","pathname","label","displayName","placeholder","onChange","validates","required","errorMessage","matchRegexp","regexp","regexPhoneNumber","regexEmail","password","slice","disabled","SELF","getAllUserHasPermissions","permissions","response","data"],"mappings":"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","file":"static/js/41.3fcf1a75.chunk.js","sourcesContent":["import React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface DesignButtonProps\n    extends DetailedHTMLProps<\n        ButtonHTMLAttributes<HTMLButtonElement>,\n        HTMLButtonElement\n    > {\n    className?: string;\n    to?: string;\n    primary?: boolean;\n}\n\nconst DesignButton: React.FC<DesignButtonProps> = props => {\n    const history = useHistory();\n    const { to, className = \"\", primary, children, ...rest } = props;\n\n    const handleClick = () => {\n        if (to) {\n            setTimeout(() => {\n                history.push(to);\n            }, 300);\n        }\n    };\n    return (\n        <div\n            className={`flex justify-center items-center cursor-pointer ${className}`}\n        >\n            <Button\n                className=\"h-full w-full\"\n                style={{ padding: \"0\" }} // because padding is overwrite when use class\n                onClick={handleClick}\n                {...(rest as any)}\n            >\n                <div\n                    className={`flex items-center font-sfpro text-lg font-medium justify-center \n                    w-full h-full leading-none normal-case ${\n                        primary ? \"text-white\" : \"text-primary\"\n                    }`}\n                >\n                    {children}\n                </div>\n            </Button>\n        </div>\n    );\n};\n\nexport default DesignButton;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, RouteComponentProps, useHistory } from \"react-router-dom\";\nimport { ValidatorForm } from \"react-material-ui-form-validator\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n    IUserInput,\n    ICreateUserInput,\n    IUpdateUserByAdminInput,\n    IUser,\n} from \"common/formatTypes\";\nimport { regexPhoneNumber, regexEmail } from \"common/functions/string/regex\";\nimport { PATH } from \"constants/routes\";\n\nimport Button from \"designs/ButtonNormal\";\nimport Input from \"designs/Input\";\nimport { t } from \"language\";\n\nimport { createUserByAdmin, updateUserByAdmin } from \"redux/actions/listUsers\";\nimport { IRootState } from \"redux/reducers\";\nimport { setBreadcrumb } from \"redux/actions/_config\";\nimport { showNotification } from \"redux/actions/notification\";\nimport { resetAction } from \"redux/actions/common\";\nimport { getAllUserHasPermissions } from \"services/listUsers\";\n\ntype ISubmit = \"EDIT\" | \"CONTINUE\";\n\nconst ActionAccountPage: React.FC<RouteComponentProps> = props => {\n    const state = props.location.state as IUser;\n    const history = useHistory();\n    const {\n        users: { results = [], loading = true },\n    } = useSelector((state: IRootState) => state.listUser);\n    const [editField, setEditField] = useState<IUser>({});\n    const dispatch = useDispatch();\n    const [users, setUsers] = useState<IUser[]>([]);\n    const [formFieldAccount, setFormFieldAccount] = useState<IUserInput>({});\n    const { actionSuccess } = useSelector((state: IRootState) => state.common);\n    const [type, setType] = useState<ISubmit>(\"CONTINUE\");\n\n    useEffect(() => {\n        if (state) {\n            setEditField(state);\n        }\n        getAllUser();\n        setupBreadcrumb();\n    }, [state]);\n\n    useEffect(() => {\n        if (actionSuccess) {\n            dispatch(resetAction());\n            history.push(PATH.MANAGE_EMPLOYER.ADD.COMPANY);\n        }\n    }, [actionSuccess]);\n\n    const setupBreadcrumb = () => {\n        dispatch(\n            setBreadcrumb([\n                {\n                    name: t(\"breadcrumb.add-employer\"),\n                },\n            ]),\n        );\n    };\n    const getAllUser = async () => {\n        const result = await getAllUserService();\n        setUsers(result);\n    };\n    const handleSubmitAccount = () => {\n        if (type === \"CONTINUE\") {\n            history.push({\n                pathname: PATH.MANAGE_EMPLOYER.ADD.COMPANY,\n                state: editField,\n            });\n            return;\n        }\n        const listPhoneNumber = users?.map(user => user.phoneNumber);\n        const listEmail = users?.map(user => user.email);\n\n        if (formFieldAccount.phoneNumber) {\n            const isExist = listPhoneNumber.includes(\n                String(formFieldAccount.phoneNumber),\n            );\n            if (isExist) {\n                dispatch(\n                    showNotification({\n                        message: t(\"userList.phone-number-existed\"),\n                        type: \"error\",\n                        title: t(\"userList.error\"),\n                    }),\n                );\n                return;\n            }\n        }\n        if (formFieldAccount.email) {\n            const isExist = listEmail.includes(String(formFieldAccount.email));\n            if (isExist) {\n                dispatch(\n                    showNotification({\n                        message: t(\"userList.email-existed\"),\n                        type: \"error\",\n                        title: t(\"userList.error\"),\n                    }),\n                );\n                return;\n            }\n        }\n        const input = {\n            ...formFieldAccount,\n        };\n\n        if (Object.keys(editField).length > 0) {\n            const payload: IUpdateUserByAdminInput = {\n                id: editField._id!,\n                updateUserInput: input,\n            };\n            dispatch(updateUserByAdmin(payload));\n        } else {\n            const payload: ICreateUserInput = {\n                createUserInput: {\n                    ...input,\n                    permission: \"EMPLOYER\",\n                },\n            };\n            dispatch(createUserByAdmin(payload));\n        }\n    };\n\n    const handleChangeAccountInput = (\n        // using for all input have value with type below:\n        value = \"\",\n        name?: string,\n    ) => {\n        setType(\"EDIT\");\n        name && setFormFieldAccount({ ...formFieldAccount, [name]: value });\n    };\n\n    return (\n        <div className=\"w-full\">\n            <h1 className=\"mb-3 font-semibold leading-none text-xxl\">\n                {t(\"manageEmployer.add-employer\")}\n            </h1>\n            <h2 className=\"text-xl font-bold leading-none text-primary\">\n                {t(\"manageEmployer.account.title\")}\n            </h2>\n            <ValidatorForm\n                onSubmit={handleSubmitAccount}\n                className=\"mt-2 font-medium font-sfpro\"\n            >\n                <div className=\"grid grid-cols-2 gap-2\">\n                    <Input\n                        className=\"col-span-2 laptop:col-span-1\"\n                        label={t(\"manageEmployer.account.full-name\")}\n                        value={editField?.displayName}\n                        name=\"displayName\"\n                        placeholder={t(\"manageEmployer.account.full-name\")}\n                        onChange={handleChangeAccountInput}\n                        validates={{\n                            required: {\n                                errorMessage: t(\n                                    \"manageEmployer.error.account.name\",\n                                ),\n                            },\n                        }}\n                    />\n                    <Input\n                        className=\"col-span-2 laptop:col-span-1\"\n                        type=\"number\"\n                        label={t(\"manageEmployer.account.phone-number\")}\n                        value={editField?.phoneNumber}\n                        name=\"phoneNumber\"\n                        placeholder={t(\n                            \"manageEmployer.placeholder.phone-number\",\n                        )}\n                        onChange={handleChangeAccountInput}\n                        validates={{\n                            required: {\n                                errorMessage: t(\n                                    \"manageEmployer.error.account.phone-number\",\n                                ),\n                            },\n                            matchRegexp: {\n                                regexp: regexPhoneNumber,\n                                errorMessage: t(\"common.validate-phone\"),\n                            },\n                        }}\n                    />\n                    <Input\n                        className=\"col-span-2 laptop:col-span-1\"\n                        label={t(\"manageEmployer.account.email\")}\n                        value={editField?.email}\n                        name=\"email\"\n                        placeholder={t(\"manageEmployer.placeholder.email\")}\n                        onChange={handleChangeAccountInput}\n                        validates={{\n                            required: {\n                                errorMessage: t(\n                                    \"manageEmployer.error.account.email\",\n                                ),\n                            },\n                            matchRegexp: {\n                                regexp: regexEmail,\n                                errorMessage: t(\"common.validate-email\"),\n                            },\n                        }}\n                    />\n                    <Input\n                        className=\"col-span-2 laptop:col-span-1\"\n                        label={t(\"manageEmployer.account.password\")}\n                        value={editField?.password?.slice(0, 11)}\n                        name=\"password\"\n                        type={\n                            Object.keys(editField).length > 0\n                                ? \"password\"\n                                : \"text\"\n                        }\n                        disabled={Object.keys(editField).length > 0}\n                        placeholder={t(\"manageEmployer.placeholder.password\")}\n                        onChange={handleChangeAccountInput}\n                        validates={{\n                            required: {\n                                errorMessage: t(\n                                    \"manageEmployer.error.account.password\",\n                                ),\n                            },\n                        }}\n                    />\n                </div>\n                <div className=\"flex justify-end mt-3 gap-x-2\">\n                    <Button\n                        className=\"w-16 h-4.5 border border-primary text-primary\"\n                        to={PATH.MANAGE_EMPLOYER.SELF}\n                    >\n                        {t(\"manageEmployer.cancel\")}\n                    </Button>\n                    <Button\n                        type=\"submit\"\n                        className=\"w-16 h-4.5 bg-primary text-white\"\n                        primary\n                    >\n                        {t(\"manageEmployer.next\")}\n                    </Button>\n                </div>\n            </ValidatorForm>\n        </div>\n    );\n};\n\nexport default ActionAccountPage;\n\nconst getAllUserService = async () => {\n    const response: any = await getAllUserHasPermissions({\n        permissions: [\"EMPLOYER\", \"ADMIN\", \"CANDIDATE\", \"MANAGER\"],\n    });\n    const { results } = response?.data?.getAllUserHasPermissions || {};\n    return results;\n};\n"],"sourceRoot":""}