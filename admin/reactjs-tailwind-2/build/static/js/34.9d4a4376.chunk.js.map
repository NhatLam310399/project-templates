{"version":3,"sources":["designs/Table/index.tsx","common/hooks/usePage.tsx","components/AlertDialog/index.tsx","../node_modules/@material-ui/core/esm/DialogTitle/DialogTitle.js","../node_modules/@material-ui/core/esm/DialogContentText/DialogContentText.js","designs/ViewField/index.tsx","pages/dashboard/Contact/components/Dialog/index.tsx","pages/dashboard/Contact/index.tsx"],"names":["TableCustom","className","data","columns","headerElement","sizePerPage","onPageChange","page","isRemote","totalSize","loading","onClickRow","onTableChange","handleChangePage","e","nextPage","handleTableChange","type","rowEvents","onClick","rowIndex","totalPage","Math","ceil","length","bootstrap4","keyField","search","props","baseProps","bordered","wrapperClasses","pagination","paginationFactory","hideSizePerPage","custom","remote","filter","sort","count","onChange","name","memo","usePage","initialPage","Number","history","useHistory","useState","state","setState","useCallback","newPage","push","location","pathname","AlertDialog","ButtonMenu","title","content","onConfirm","note","React","open","setOpen","handleClose","onClose","maxWidth","fullWidth","PaperProps","style","backgroundColor","colors","white","borderRadius","padding","id","innerClassName","primary","DialogTitle","ref","children","classes","_props$disableTypogra","disableTypography","other","_objectWithoutProperties","_extends","clsx","root","Typography","component","variant","withStyles","margin","flex","DialogContentText","color","marginBottom","ViewField","label","isTextArea","ContactDialog","editField","Dialog","size","isDialogView","t","email","description","Contact","language","i18n","useSelector","contact","allContact","results","totalCount","dispatch","useDispatch","actionSuccess","common","getQueryFromLocation","setPage","useEffect","getAllContactAPI","setupBreadcrumb","resetAction","shouldDecreasePageIndex","getAllContact","setBreadcrumb","renderAction","record","SVG","width","payload","_id","deleteContact","handleDelete","useMemo","text","dataField","headerStyle","formatter","_","Table"],"mappings":"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","file":"static/js/34.9d4a4376.chunk.js","sourcesContent":["/**\n * @note read the document in /src/docs/designs/Table.md.\n * You should read it in gitlab.\n */\n\nimport React, { memo } from \"react\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport BootstrapTable, { ColumnDescription } from \"react-bootstrap-table-next\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport SVG from \"designs/SVG\";\nimport { ITableProps } from \"./interfaces\";\n\nexport type IColumns = ColumnDescription<any, any>[];\n\nconst TableCustom: React.FC<ITableProps> = ({\n    className = \"\",\n    data,\n    columns,\n    headerElement,\n    sizePerPage = 10,\n    onPageChange,\n    page = 1,\n    isRemote = false,\n    totalSize = 0,\n    loading = true,\n    onClickRow,\n    onTableChange,\n}) => {\n    const handleChangePage = (\n        e: React.ChangeEvent<unknown>,\n        nextPage: number,\n    ) => {\n        onPageChange && onPageChange(nextPage);\n    };\n\n    const handleTableChange = (\n        type: string,\n        { page, sizePerPage }: Record<any, any>,\n    ) => {\n        const newPage = page - 1;\n\n        onTableChange && onTableChange(newPage);\n    };\n\n    // const handleEmptyData = () => {\n    //     return (\n    //         <div className=\"empty-data\">\n    //             <SVG name=\"common/empty-data\" />\n    //         </div>\n    //     );\n    // };\n\n    const rowEvents = {\n        onClick: (rowIndex: number) => {\n            onClickRow && onClickRow(rowIndex);\n        },\n    };\n\n    const totalPage = Math.ceil(totalSize / sizePerPage);\n\n    return !loading && data?.length === 0 ? (\n        <div className=\"flex items-center justify-center w-full h-full mt-10 empty-data\">\n            <SVG name=\"common/empty-data\" />\n        </div>\n    ) : (\n        <div className={`custom-table__container ${className}`}>\n            <ToolkitProvider\n                bootstrap4\n                keyField=\"id\"\n                data={data}\n                columns={columns}\n                search\n            >\n                {(props: any) => {\n                    return (\n                        <>\n                            <div>{headerElement}</div>\n                            <BootstrapTable\n                                {...props.baseProps}\n                                bordered={false}\n                                wrapperClasses=\"table-responsive col-span-12 overflow-auto lg:overflow-visible font-sfpro\"\n                                rowEvents={rowEvents}\n                                pagination={paginationFactory({\n                                    hideSizePerPage: true,\n                                    sizePerPage,\n                                    page,\n                                    totalSize,\n                                    custom: true,\n                                })}\n                                remote={\n                                    isRemote && {\n                                        pagination: true,\n                                        filter: false,\n                                        sort: false,\n                                    }\n                                }\n                                onTableChange={handleTableChange}\n                            />\n                            {totalSize !== 0 && (\n                                <div className=\"flex justify-end mt-3 pagination-wrap\">\n                                    <Pagination\n                                        page={page}\n                                        count={totalPage}\n                                        onChange={handleChangePage}\n                                    />\n                                </div>\n                            )}\n                        </>\n                    );\n                }}\n            </ToolkitProvider>\n        </div>\n    );\n};\n\nexport default memo(TableCustom);\n","import { useCallback, useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\ntype IQueryPage = string | string[] | null;\n\nexport const usePage = (\n    page: IQueryPage,\n): [number, (newPage: number) => void] => {\n    const initialPage = page ? Number(page) : 1;\n    const history = useHistory();\n    const [state, setState] = useState(Number(initialPage));\n    const setPage = useCallback((newPage: number) => {\n        setState(newPage);\n        history.push(`${history.location.pathname}?page=${newPage}`);\n    }, []);\n\n    return [state, setPage];\n};\n","import React from \"react\";\nimport Button from \"designs/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { colors } from \"common/styles/colors\";\n\ninterface IAlertDialogProps {\n    ButtonMenu: React.ReactElement;\n    title: string;\n    content?: string | undefined;\n    onConfirm?: (data: any) => void;\n    data?: any;\n    className?: string;\n    note?: string;\n}\n\nconst AlertDialog: React.FC<IAlertDialogProps> = props => {\n    const {\n        ButtonMenu,\n        title = \"\",\n        content = \"\",\n        onConfirm,\n        data,\n        className = \"\",\n        note = \"\",\n    } = props;\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleConfirm = (e: React.MouseEvent<HTMLButtonElement>) => {\n        onConfirm && onConfirm(data);\n        setOpen(false);\n    };\n\n    return (\n        <div className={`${className}`}>\n            <button\n                type=\"button\"\n                className=\"block w-full\"\n                onClick={handleClickOpen}\n            >\n                {ButtonMenu}\n            </button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                maxWidth=\"sm\"\n                fullWidth\n                PaperProps={{\n                    style: {\n                        backgroundColor: colors.white,\n                        borderRadius: \"0px\",\n                        padding: \"40px\",\n                    },\n                }}\n            >\n                <DialogTitle className=\"p-0 mb-2\" id=\"alert-dialog-title\">\n                    <h1 className=\"font-bold leading-none text-xxl font-sfpro\">\n                        {title}\n                    </h1>\n                </DialogTitle>\n                <DialogContent className=\"p-0 mb-3\">\n                    <DialogContentText id=\"alert-dialog-description\">\n                        <span className=\"block text-lg leading-none text-black font-sfpro\">\n                            {content}\n                        </span>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions className=\"flex flex-col w-full gap-2 p-0 phone:flex-row\">\n                    <Button\n                        className=\"w-full phone:w-auto\"\n                        innerClassName=\"py-1 px-3.5 h-4 font-normal normal-case border-none\"\n                        onClick={handleClose}\n                        type=\"button\"\n                    >\n                        Huỷ bỏ\n                    </Button>\n                    <Button\n                        className=\"w-full phone:w-auto\"\n                        primary\n                        innerClassName=\"py-1 px-3.5 h-4 font-normal normal-case\"\n                        onClick={handleConfirm}\n                        type=\"submit\"\n                    >\n                        Đồng ý\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n};\n\nexport default AlertDialog;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    margin: 0,\n    padding: '16px 24px',\n    flex: '0 0 auto'\n  }\n};\nvar DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), disableTypography ? children : /*#__PURE__*/React.createElement(Typography, {\n    component: \"h2\",\n    variant: \"h6\"\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the children won't be wrapped by a typography component.\n   * For instance, this can be useful to render an h4 instead of the default h2.\n   */\n  disableTypography: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogTitle'\n})(DialogTitle);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    marginBottom: 12\n  }\n};\nvar DialogContentText = /*#__PURE__*/React.forwardRef(function DialogContentText(props, ref) {\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    component: \"p\",\n    variant: \"body1\",\n    color: \"textSecondary\",\n    ref: ref\n  }, props));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContentText.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogContentText'\n})(DialogContentText);","interface IViewField {\n    label?: string;\n    isTextArea?: boolean;\n    className?: string;\n    content?: string;\n}\n\nconst ViewField: React.FC<IViewField> = props => {\n    const { label, isTextArea, className, content } = props;\n\n    return (\n        <div className={className}>\n            <p className=\"text-lg font-medium leading-none mb-0.5\">{label}</p>\n            <div\n                className={`bg-gray py-1.5 px-2 text-body text-md ${\n                    isTextArea ? \"h-14 overflow-y-auto\" : \"h-5\"\n                }`}\n            >\n                {content}\n            </div>\n        </div>\n    );\n};\n\nexport default ViewField;\n","import React from \"react\";\nimport { t } from \"language\";\nimport { IContact } from \"common/formatTypes\";\nimport Dialog, { DialogTitle } from \"components/Dialog\";\nimport ViewField from \"designs/ViewField\";\n\ninterface IJobTypeDialogProps {\n    ButtonMenu: React.ReactElement;\n    editField?: IContact;\n    className?: string;\n}\n\nconst ContactDialog: React.FC<IJobTypeDialogProps> = ({\n    ButtonMenu,\n    editField,\n    className,\n}) => {\n    const handleClose = () => {};\n\n    return (\n        <Dialog\n            ButtonMenu={ButtonMenu}\n            onClose={handleClose}\n            className={className}\n            size=\"md\"\n            isDialogView\n        >\n            <DialogTitle className=\"mb-3\">\n                {t(\"contact.title-view\")}\n            </DialogTitle>\n\n            <div className=\"w-full mb-1\">\n                <div className=\"grid grid-cols-2 gap-2\">\n                    <ViewField\n                        className=\"col-span-2 laptop:col-span-1\"\n                        label={t(\"contact.full-name\")}\n                        content={editField?.name}\n                    />\n                    <ViewField\n                        className=\"col-span-2 laptop:col-span-1\"\n                        label={t(\"contact.email\")}\n                        content={editField?.email}\n                    />\n                    <ViewField\n                        className=\"col-span-2 laptop:col-span-1\"\n                        label={t(\"contact.title\")}\n                        content={editField?.title}\n                    />\n                </div>\n                <ViewField\n                    className=\"w-full mt-2\"\n                    label={t(\"contact.content\")}\n                    isTextArea\n                    content={editField?.description}\n                />\n            </div>\n        </Dialog>\n    );\n};\n\nexport default ContactDialog;\n","/* eslint-disable react/destructuring-assignment */\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport i18n, { t } from \"language\";\n\nimport Table, { IColumns } from \"designs/Table\";\nimport AlertDialog from \"components/AlertDialog\";\n\nimport { IRootState, IContact, IDeleteContact } from \"common/formatTypes\";\nimport { getAllContact, deleteContact } from \"redux/actions/contact\";\nimport { resetAction } from \"redux/actions/common\";\nimport { setBreadcrumb } from \"redux/actions/_config\";\nimport {\n    getQueryFromLocation,\n    shouldDecreasePageIndex,\n} from \"common/functions/\";\nimport SVG from \"designs/SVG\";\nimport Button from \"designs/Button\";\nimport { usePage } from \"common/hooks/usePage\";\nimport { PATH } from \"constants/routes\";\nimport Dialog from \"./components/Dialog\";\nimport SearchTable from \"components/SearchTable\";\n\nconst SIZE_PER_PAGE = 10;\n\nconst Contact: React.FC<RouteComponentProps> = ({ location }) => {\n    const { language } = i18n;\n\n    const {\n        allContact: {\n            results: allContact = [],\n            totalCount = 0,\n            loading = true,\n        } = {},\n    } = useSelector((state: IRootState) => state.contact);\n\n    const dispatch = useDispatch();\n\n    const { actionSuccess } = useSelector((state: IRootState) => state.common);\n\n    const [page, setPage] = usePage(getQueryFromLocation(location)?.page);\n\n    useEffect(() => {\n        getAllContactAPI();\n        setupBreadcrumb();\n    }, []);\n\n    useEffect(() => {\n        getAllContactAPI();\n    }, [page]);\n\n    useEffect(() => {\n        if (actionSuccess) {\n            dispatch(resetAction());\n\n            if (shouldDecreasePageIndex(page, totalCount, SIZE_PER_PAGE)) {\n                setPage(page - 1);\n                return;\n            }\n            getAllContactAPI();\n        }\n    }, [actionSuccess]);\n\n    const getAllContactAPI = () => {\n        dispatch(getAllContact());\n    };\n\n    const setupBreadcrumb = () => {\n        dispatch(\n            setBreadcrumb([\n                {\n                    name: t(\"breadcrumb.contact\"),\n                },\n            ]),\n        );\n    };\n\n    const handleDelete = (record: IContact) => {\n        const payload: IDeleteContact = {\n            id: record?._id || \"\",\n        };\n        dispatch(deleteContact(payload));\n    };\n\n    const handleChangePage = useCallback((nextPage: number) => {\n        setPage(nextPage);\n    }, []);\n\n    const renderAction = (record: IContact) => {\n        return (\n            <div className=\"flex items-center justify-end space-x-1\">\n                <AlertDialog\n                    ButtonMenu={<SVG name=\"common/delete\" width=\"20\" />}\n                    title={t(\"contact.delete-title\")}\n                    content={`${t(\"contact.delete-content\")}`}\n                    onConfirm={() => handleDelete(record)}\n                />\n                <Dialog\n                    ButtonMenu={<SVG name=\"common/eye\" width=\"20\" />}\n                    editField={record}\n                />\n            </div>\n        );\n    };\n\n    const columns: IColumns = useMemo(\n        () => [\n            {\n                text: t(\"contact.full-name\"),\n                dataField: \"name\",\n                headerStyle: {\n                    width: \"22%\",\n                },\n            },\n            {\n                text: t(\"contact.email\"),\n                dataField: \"email\",\n                headerStyle: {\n                    width: \"30%\",\n                },\n            },\n            {\n                text: t(\"contact.title\"),\n                dataField: \"title\",\n                headerStyle: {\n                    width: \"35.8%\",\n                },\n            },\n            {\n                text: t(\"common.table-action\"),\n                dataField: \"actions\",\n                formatter: (_: string, record: IContact) =>\n                    renderAction(record),\n            },\n        ],\n        [language, page],\n    );\n\n    return (\n        <div>\n            <h1 className=\"mb-12 font-bold leading-none text-xxl font-sfpro\">\n                {t(\"breadcrumb.contact\")}\n            </h1>\n            <Table\n                isRemote\n                data={allContact}\n                columns={columns}\n                totalSize={totalCount}\n                sizePerPage={SIZE_PER_PAGE}\n                page={page}\n                loading={loading}\n                onPageChange={handleChangePage}\n            />\n        </div>\n    );\n};\nexport default Contact;\n"],"sourceRoot":""}