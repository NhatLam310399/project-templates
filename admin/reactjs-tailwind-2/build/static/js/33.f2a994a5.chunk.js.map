{"version":3,"sources":["designs/Table/index.tsx","common/hooks/usePage.tsx","components/AlertDialog/index.tsx","components/SearchTable/index.tsx","designs/TextArea/styles.tsx","designs/TextArea/index.tsx","designs/IconButton/index.tsx","designs/actionButtons/index.tsx","pages/dashboard/PostConfiguraiton/CategoryLevel1/components/Dialog/index.tsx","pages/dashboard/PostConfiguraiton/CategoryLevel1/index.tsx"],"names":["TableCustom","className","data","columns","headerElement","sizePerPage","onPageChange","page","isRemote","totalSize","loading","onClickRow","onTableChange","handleChangePage","e","nextPage","handleTableChange","type","rowEvents","onClick","rowIndex","totalPage","Math","ceil","length","bootstrap4","keyField","search","props","baseProps","bordered","wrapperClasses","pagination","paginationFactory","hideSizePerPage","custom","remote","filter","sort","count","onChange","name","memo","usePage","initialPage","Number","history","useHistory","useState","state","setState","useCallback","newPage","push","location","pathname","AlertDialog","ButtonMenu","title","content","onConfirm","note","React","open","setOpen","handleClose","onClose","maxWidth","fullWidth","PaperProps","style","backgroundColor","colors","white","borderRadius","padding","id","innerClassName","primary","SearchTable","placeholder","onFetchData","classes","useStyles","text","setText","searchAPIDebounced","AwesomeDebouncePromise","handleTextChange","a","newText","target","value","autoComplete","input","makeStyles","theme","border","borderColor","inputFieldHidden","opacity","position","formHelperText","color","error","TextArea","label","required","helpInputText","errorMessage","t","rest","validators","randomId","isError","setIsError","useEffect","TextField","width","multiline","rows","variant","event","currentValue","FormHelperText","errorMessages","validatorListener","isValid","IconButton","svgName","Tooltip","arrow","disableFocusListener","disableTouchListener","root","SVG","minWidth","EditButton","DeleteButton","CategoryLevel1Dialog","editField","dispatch","useDispatch","inputFields","setInputFields","Dialog","payload","_id","categoryLevel1Input","updateCategoryLevel1","createCategoryLevel1","Input","validates","description","CategoryLevel1","useSelector","newsConfig","allCategoryLevel1","listCategoryLevel1","results","totalCount","actionSuccess","common","searchKeyword","setSearchKeyword","getQueryFromLocation","setPage","setupBreadcrumb","getAllCategoryLevel1API","resetAction","shouldDecreasePageIndex","setBreadcrumb","filterCategoryLevel1","undefined","size","getAllCategoryLevel1","renderAction","record","deleteCategoryLevel1","handleDelete","useMemo","dataField","formatter","_","i18n","language","Button","Table"],"mappings":"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","file":"static/js/33.f2a994a5.chunk.js","sourcesContent":["/**\n * @note read the document in /src/docs/designs/Table.md.\n * You should read it in gitlab.\n */\n\nimport React, { memo } from \"react\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport BootstrapTable, { ColumnDescription } from \"react-bootstrap-table-next\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport SVG from \"designs/SVG\";\nimport { ITableProps } from \"./interfaces\";\n\nexport type IColumns = ColumnDescription<any, any>[];\n\nconst TableCustom: React.FC<ITableProps> = ({\n    className = \"\",\n    data,\n    columns,\n    headerElement,\n    sizePerPage = 10,\n    onPageChange,\n    page = 1,\n    isRemote = false,\n    totalSize = 0,\n    loading = true,\n    onClickRow,\n    onTableChange,\n}) => {\n    const handleChangePage = (\n        e: React.ChangeEvent<unknown>,\n        nextPage: number,\n    ) => {\n        onPageChange && onPageChange(nextPage);\n    };\n\n    const handleTableChange = (\n        type: string,\n        { page, sizePerPage }: Record<any, any>,\n    ) => {\n        const newPage = page - 1;\n\n        onTableChange && onTableChange(newPage);\n    };\n\n    // const handleEmptyData = () => {\n    //     return (\n    //         <div className=\"empty-data\">\n    //             <SVG name=\"common/empty-data\" />\n    //         </div>\n    //     );\n    // };\n\n    const rowEvents = {\n        onClick: (rowIndex: number) => {\n            onClickRow && onClickRow(rowIndex);\n        },\n    };\n\n    const totalPage = Math.ceil(totalSize / sizePerPage);\n\n    return !loading && data?.length === 0 ? (\n        <div className=\"flex items-center justify-center w-full h-full mt-10 empty-data\">\n            <SVG name=\"common/empty-data\" />\n        </div>\n    ) : (\n        <div className={`custom-table__container ${className}`}>\n            <ToolkitProvider\n                bootstrap4\n                keyField=\"id\"\n                data={data}\n                columns={columns}\n                search\n            >\n                {(props: any) => {\n                    return (\n                        <>\n                            <div>{headerElement}</div>\n                            <BootstrapTable\n                                {...props.baseProps}\n                                bordered={false}\n                                wrapperClasses=\"table-responsive col-span-12 overflow-auto lg:overflow-visible font-sfpro\"\n                                rowEvents={rowEvents}\n                                pagination={paginationFactory({\n                                    hideSizePerPage: true,\n                                    sizePerPage,\n                                    page,\n                                    totalSize,\n                                    custom: true,\n                                })}\n                                remote={\n                                    isRemote && {\n                                        pagination: true,\n                                        filter: false,\n                                        sort: false,\n                                    }\n                                }\n                                onTableChange={handleTableChange}\n                            />\n                            {totalSize !== 0 && (\n                                <div className=\"flex justify-end mt-3 pagination-wrap\">\n                                    <Pagination\n                                        page={page}\n                                        count={totalPage}\n                                        onChange={handleChangePage}\n                                    />\n                                </div>\n                            )}\n                        </>\n                    );\n                }}\n            </ToolkitProvider>\n        </div>\n    );\n};\n\nexport default memo(TableCustom);\n","import { useCallback, useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\ntype IQueryPage = string | string[] | null;\n\nexport const usePage = (\n    page: IQueryPage,\n): [number, (newPage: number) => void] => {\n    const initialPage = page ? Number(page) : 1;\n    const history = useHistory();\n    const [state, setState] = useState(Number(initialPage));\n    const setPage = useCallback((newPage: number) => {\n        setState(newPage);\n        history.push(`${history.location.pathname}?page=${newPage}`);\n    }, []);\n\n    return [state, setPage];\n};\n","import React from \"react\";\nimport Button from \"designs/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { colors } from \"common/styles/colors\";\n\ninterface IAlertDialogProps {\n    ButtonMenu: React.ReactElement;\n    title: string;\n    content?: string | undefined;\n    onConfirm?: (data: any) => void;\n    data?: any;\n    className?: string;\n    note?: string;\n}\n\nconst AlertDialog: React.FC<IAlertDialogProps> = props => {\n    const {\n        ButtonMenu,\n        title = \"\",\n        content = \"\",\n        onConfirm,\n        data,\n        className = \"\",\n        note = \"\",\n    } = props;\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleConfirm = (e: React.MouseEvent<HTMLButtonElement>) => {\n        onConfirm && onConfirm(data);\n        setOpen(false);\n    };\n\n    return (\n        <div className={`${className}`}>\n            <button\n                type=\"button\"\n                className=\"block w-full\"\n                onClick={handleClickOpen}\n            >\n                {ButtonMenu}\n            </button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                maxWidth=\"sm\"\n                fullWidth\n                PaperProps={{\n                    style: {\n                        backgroundColor: colors.white,\n                        borderRadius: \"0px\",\n                        padding: \"40px\",\n                    },\n                }}\n            >\n                <DialogTitle className=\"p-0 mb-2\" id=\"alert-dialog-title\">\n                    <h1 className=\"font-bold leading-none text-xxl font-sfpro\">\n                        {title}\n                    </h1>\n                </DialogTitle>\n                <DialogContent className=\"p-0 mb-3\">\n                    <DialogContentText id=\"alert-dialog-description\">\n                        <span className=\"block text-lg leading-none text-black font-sfpro\">\n                            {content}\n                        </span>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions className=\"flex flex-col w-full gap-2 p-0 phone:flex-row\">\n                    <Button\n                        className=\"w-full phone:w-auto\"\n                        innerClassName=\"py-1 px-3.5 h-4 font-normal normal-case border-none\"\n                        onClick={handleClose}\n                        type=\"button\"\n                    >\n                        Huỷ bỏ\n                    </Button>\n                    <Button\n                        className=\"w-full phone:w-auto\"\n                        primary\n                        innerClassName=\"py-1 px-3.5 h-4 font-normal normal-case\"\n                        onClick={handleConfirm}\n                        type=\"submit\"\n                    >\n                        Đồng ý\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n};\n\nexport default AlertDialog;\n","/* eslint-disable prefer-const */\nimport React, { ChangeEvent, useEffect, useRef, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport AwesomeDebouncePromise from \"awesome-debounce-promise\";\n\nimport SVG from \"designs/SVG\";\nimport useConstant from \"use-constant\";\n\nconst DELAY = 300;\n\ninterface ISearchBoxTableProps {\n    className?: string;\n    placeholder?: string;\n    onFetchData: (text: string) => void;\n}\n\nconst SearchTable: React.FC<ISearchBoxTableProps> = ({\n    className = \"\",\n    placeholder = \"Tìm kiếm\",\n    onFetchData,\n}) => {\n    const classes = useStyles();\n\n    const [text, setText] = useState<string>(\"\");\n\n    const searchAPIDebounced = AwesomeDebouncePromise(onFetchData, DELAY);\n\n    const handleTextChange = async (e: ChangeEvent<HTMLInputElement>) => {\n        const newText = e.target.value;\n        searchAPIDebounced(newText);\n        setText(newText);\n    };\n\n    return (\n        <div className={`search-form w-full phone:w-auto ${className}`}>\n            <div className=\"relative w-full laptop:w-25 max-w-full\">\n                <input\n                    name=\"search\"\n                    type=\"text\"\n                    placeholder={placeholder}\n                    value={text}\n                    onChange={handleTextChange}\n                    autoComplete=\"off\"\n                    className={`block w-full max-w-full pl-4 py-1.5 pr-1 text-sm leading-none font-sfpro text-body ${classes.input}`}\n                />\n                <span className=\"absolute top-1/2 transform -translate-y-1/2 pl-1.5 block leading-none group\">\n                    <SVG name=\"common/search\" className=\"w-2\" />\n                </span>\n            </div>\n        </div>\n    );\n};\n\nexport default SearchTable;\n\nconst useStyles = makeStyles(theme => ({\n    input: {\n        border: \"1px solid rgba(0,0,0,0.23)\",\n        \"&:hover, &:focus\": {\n            borderColor: \"rgba(0,0,0,0.87)\",\n        },\n    },\n}));\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport { colors } from \"common/styles/colors\";\n\nexport const useStyles = makeStyles({\n    inputFieldHidden: {\n        opacity: 0,\n        position: \"absolute\",\n    },\n    formHelperText: {\n        color: colors.error,\n    },\n});\n","import React, { useState, useMemo, useEffect } from \"react\";\nimport { TextValidator } from \"react-material-ui-form-validator\";\nimport TextField, { BaseTextFieldProps } from \"@material-ui/core/TextField\";\nimport { randomId } from \"common/functions\";\nimport { t } from \"language\";\nimport { FormHelperText } from \"@material-ui/core\";\nimport { useStyles } from \"./styles\";\n\ninterface ITextAreaProps extends BaseTextFieldProps {\n    label: string;\n    name: string;\n    value?: string;\n    onChange?: (value: string, name?: string) => void;\n    required?: boolean;\n    errorMessage?: string;\n    helpInputText?: string;\n    placeholder?: string;\n}\n\nconst TextArea: React.FC<ITextAreaProps> = props => {\n    const {\n        className = \"\",\n        label,\n        name,\n        value = \"\",\n        onChange,\n        required,\n        helpInputText = \"\",\n        errorMessage = t(\"common.text-area-placeholder\"),\n        placeholder = t(\"common.text-area-placeholder\"),\n        ...rest\n    } = props;\n    const validators = required ? [\"required\"] : [];\n    const classes = useStyles();\n\n    const id = randomId();\n    const [text, setText] = useState(value);\n    const [isError, setIsError] = useState(false);\n\n    useEffect(() => {\n        if (value) {\n            setText(value);\n        } else {\n            setText(\"\");\n        }\n    }, [value]);\n\n    const handleValidate = (isValid: boolean) => {\n        if (isValid) {\n            isError && setIsError(false);\n        } else {\n            !isError && setIsError(true);\n        }\n    };\n\n    const handleChange = (event: any) => {\n        const currentValue = event.target?.value || \"\";\n        if (name) {\n            onChange && onChange(currentValue, name);\n        } else {\n            onChange && onChange(currentValue);\n        }\n        setText(currentValue);\n    };\n\n    return (\n        <>\n            <div className={`text-validator-wrapper ${className}`}>\n                {label && (\n                    <p className=\"text-lg font-medium flex items-center mb-0.5\">\n                        {label}\n                        {required && <span className=\"text-error\">*</span>}\n                        {helpInputText && (\n                            <span className=\"text-sm text-body ml-0.5 \">\n                                {helpInputText}\n                            </span>\n                        )}\n                    </p>\n                )}\n                <TextField\n                    placeholder={placeholder}\n                    className=\"bg-white\"\n                    id={id}\n                    style={{\n                        width: \"100%\",\n                    }}\n                    multiline\n                    rows={8}\n                    variant=\"outlined\"\n                    name={name}\n                    value={text}\n                    onChange={handleChange}\n                    {...(rest as any)}\n                />\n                {isError && (\n                    <FormHelperText\n                        className=\"font-sfpro\"\n                        error\n                        variant=\"outlined\"\n                    >\n                        {errorMessage}\n                    </FormHelperText>\n                )}\n            </div>\n            {required && (\n                <TextValidator\n                    value={text}\n                    name={id}\n                    validators={validators}\n                    errorMessages={[errorMessage]}\n                    className={`${classes.inputFieldHidden} -z-1`}\n                    validatorListener={handleValidate}\n                />\n            )}\n        </>\n    );\n};\n\nexport default TextArea;\n","import { makeStyles, Button, Tooltip } from \"@material-ui/core\";\n\nimport SVG from \"designs/SVG\";\n\ninterface IIConButton {\n    svgName: string;\n    className?: string;\n    title?: string;\n    onClick?: () => void;\n}\n\nconst IconButton: React.FC<IIConButton> = props => {\n    const { className = \"\", title = \"\", svgName = \"\", onClick } = props;\n    const classes = useStyles();\n\n    return (\n        <div className={className} onClick={onClick}>\n            <Tooltip\n                title={title}\n                arrow\n                disableFocusListener\n                disableTouchListener\n            >\n                <Button className={classes.root}>\n                    <SVG name={svgName} />\n                </Button>\n            </Tooltip>\n        </div>\n    );\n};\n\nexport default IconButton;\n\nconst useStyles = makeStyles({\n    root: {\n        padding: \"0px\",\n        borderRadius: \"99px\",\n        minWidth: \"0\",\n    },\n});\n","import IconButton from \"designs/IconButton\";\n\ninterface IIconButtonProps {\n    className?: string;\n}\n\nexport const EditButton: React.FC<IIconButtonProps> = props => (\n    <IconButton svgName=\"common/edit\" title=\"Chỉnh sửa\" {...props} />\n);\n\nexport const DeleteButton: React.FC<IIconButtonProps> = props => (\n    <IconButton svgName=\"common/delete\" title=\"Xoá\" {...props} />\n);\n","import React, { useState } from \"react\";\nimport i18n, { t } from \"language\";\nimport {\n    ICreateCategoryLevel1Input,\n    IUpdateCategoryLevel1Input,\n    ICategoryLevel1,\n    ICategoryLevel1Input,\n} from \"common/formatTypes\";\nimport Dialog, { DialogTitle } from \"components/Dialog\";\nimport Input from \"designs/Input\";\nimport TextArea from \"designs/TextArea\";\n\nimport { useDispatch } from \"react-redux\";\nimport {\n    createCategoryLevel1,\n    updateCategoryLevel1,\n} from \"redux/actions/newsConfig\";\n\ninterface ICategoryLevel1DialogProps {\n    ButtonMenu: React.ReactElement;\n    isEdit?: boolean;\n    editField?: ICategoryLevel1;\n    className?: string;\n}\n\nconst CategoryLevel1Dialog: React.FC<ICategoryLevel1DialogProps> = ({\n    ButtonMenu,\n    editField,\n    className,\n}) => {\n    const dispatch = useDispatch();\n    const [inputFields, setInputFields] = useState<ICategoryLevel1Input>({});\n\n    const handleSubmit = () => {\n        if (editField) {\n            const payload: IUpdateCategoryLevel1Input = {\n                id: editField._id!,\n                categoryLevel1Input: {\n                    ...inputFields,\n                },\n            };\n            dispatch(updateCategoryLevel1(payload));\n        } else {\n            const payload: ICreateCategoryLevel1Input = {\n                categoryLevel1Input: {\n                    ...inputFields,\n                },\n            };\n            dispatch(createCategoryLevel1(payload));\n        }\n    };\n    const handleChangeInput = (\n        // using for all input have value with type below:\n        value = \"\",\n        name?: string,\n    ) => {\n        name && setInputFields({ ...inputFields, [name]: value });\n    };\n\n    const handleClose = () => {\n        setInputFields({});\n    };\n\n    return (\n        <Dialog\n            ButtonMenu={ButtonMenu}\n            onConfirm={handleSubmit}\n            onClose={handleClose}\n            className={className}\n        >\n            <DialogTitle className=\"mb-3\">\n                {editField ? t(\"job.edit-category-1\") : t(\"job.add-category-1\")}\n            </DialogTitle>\n\n            <div className=\"\">\n                <Input\n                    placeholder={t(\"job.category-name-placeholder\")}\n                    label={t(\"job.category-name\")}\n                    value={editField?.name}\n                    name=\"name\"\n                    onChange={handleChangeInput}\n                    className=\"mb-2\"\n                    validates={{\n                        required: {\n                            errorMessage: t(\"job.validate-required-category\"),\n                        },\n                    }}\n                />\n                <TextArea\n                    label={t(\"job.description\")}\n                    value={editField?.description}\n                    name=\"description\"\n                    onChange={description => {\n                        setInputFields(state => ({\n                            ...state,\n                            description,\n                        }));\n                    }}\n                />\n            </div>\n        </Dialog>\n    );\n};\n\nexport default CategoryLevel1Dialog;\n","/* eslint-disable react/destructuring-assignment */\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router\";\n\nimport {\n    ICategoryLevel1,\n    IGetAllCategoryLevel1,\n    IDeleteCategoryLevel1,\n    IRootState,\n} from \"common/formatTypes\";\nimport {\n    getQueryFromLocation,\n    shouldDecreasePageIndex,\n} from \"common/functions/\";\nimport { usePage } from \"common/hooks/usePage\";\n\nimport SearchTable from \"components/SearchTable\";\nimport AlertDialog from \"components/AlertDialog\";\n\nimport { PATH } from \"constants/routes\";\n\nimport {\n    getAllCategoryLevel1,\n    deleteCategoryLevel1,\n} from \"redux/actions/newsConfig\";\nimport { resetAction } from \"redux/actions/common\";\nimport { setBreadcrumb } from \"redux/actions/_config\";\n\nimport i18n, { t } from \"language\";\n\nimport Button from \"designs/Button\";\nimport Table, { IColumns } from \"designs/Table\";\nimport { DeleteButton, EditButton } from \"designs/actionButtons\";\n\nimport Dialog from \"./components/Dialog\";\n\nconst SIZE_PER_PAGE = 10;\n\nconst CategoryLevel1: React.FC<RouteComponentProps> = ({ location }) => {\n    const {\n        allCategoryLevel1: {\n            results: listCategoryLevel1,\n            totalCount = 0,\n            loading = true,\n        },\n    } = useSelector((state: IRootState) => state.newsConfig);\n\n    const { actionSuccess } = useSelector((state: IRootState) => state.common);\n\n    const dispatch = useDispatch();\n\n    const [searchKeyword, setSearchKeyword] = useState(\"\");\n    const [page, setPage] = usePage(getQueryFromLocation(location)?.page);\n\n    useEffect(() => {\n        setupBreadcrumb();\n    }, []);\n\n    useEffect(() => {\n        getAllCategoryLevel1API();\n    }, [page, searchKeyword]);\n\n    useEffect(() => {\n        if (actionSuccess) {\n            dispatch(resetAction());\n            if (shouldDecreasePageIndex(page, totalCount, SIZE_PER_PAGE)) {\n                setPage(page - 1);\n                return;\n            }\n            getAllCategoryLevel1API();\n        }\n    }, [actionSuccess]);\n\n    const setupBreadcrumb = () => {\n        dispatch(\n            setBreadcrumb([\n                {\n                    name: t(\"breadcrumb.category-level-1\"),\n                },\n            ]),\n        );\n    };\n    const getAllCategoryLevel1API = () => {\n        const payload: IGetAllCategoryLevel1 = {\n            filterCategoryLevel1: {\n                name: searchKeyword || undefined,\n            },\n            page: page - 1,\n            size: SIZE_PER_PAGE,\n        };\n        dispatch(getAllCategoryLevel1(payload));\n    };\n\n    const handleSearch = (text = \"\") => {\n        setPage(1);\n        setSearchKeyword(text);\n    };\n\n    const handleDelete = (record: ICategoryLevel1) => {\n        const payload: IDeleteCategoryLevel1 = {\n            id: record._id || \"\",\n        };\n        dispatch(deleteCategoryLevel1(payload));\n    };\n\n    const handleChangePage = useCallback((nextPage: number) => {\n        setPage(nextPage);\n    }, []);\n\n    const renderAction = (record: ICategoryLevel1) => {\n        return (\n            <div className=\"flex justify-end space-x-1\">\n                <AlertDialog\n                    ButtonMenu={<DeleteButton />}\n                    title={t(\"job.delete-category-1\")}\n                    content={`${t(\"job.delete-category-1-content\")} ?`}\n                    onConfirm={() => handleDelete(record)}\n                />\n                <Dialog\n                    className=\"col-start-4 col-end-7 laptop:col-start-11 laptop:col-end-13\"\n                    ButtonMenu={<EditButton />}\n                    editField={record}\n                />\n            </div>\n        );\n    };\n\n    const columns: IColumns = useMemo(\n        () => [\n            {\n                text: t(\"job.category-name\"),\n                dataField: \"name\",\n            },\n            {\n                text: t(\"job.description\"),\n                dataField: \"description\",\n            },\n            {\n                text: t(\"job.action\"),\n                dataField: \"actions\",\n                formatter: (_: string, record: ICategoryLevel1) =>\n                    renderAction(record),\n            },\n        ],\n        [i18n.language],\n    );\n\n    return (\n        <div>\n            <h1 className=\"mb-2 font-bold leading-none text-xxl font-sfpro\">\n                {t(\"breadcrumb.category-level-1\")}\n            </h1>\n            <div className=\"flex flex-col items-center justify-between w-full max-w-full gap-2 pb-3 phone:flex-row\">\n                <SearchTable\n                    placeholder={t(\"job.search\")}\n                    onFetchData={handleSearch}\n                />\n                <Dialog\n                    ButtonMenu={\n                        <Button\n                            primary\n                            innerClassName=\"py-1.5 h-4 text-lg font-medium font-sfpro normal-case h-full\"\n                            type=\"submit\"\n                        >\n                            {t(\"job.add-btn-category-1\")}\n                        </Button>\n                    }\n                    className=\"w-full max-full phone:w-25\"\n                />\n            </div>\n            <Table\n                isRemote\n                data={listCategoryLevel1}\n                columns={columns}\n                page={page}\n                loading={loading}\n                onPageChange={handleChangePage}\n                sizePerPage={SIZE_PER_PAGE}\n                totalSize={totalCount}\n            />\n        </div>\n    );\n};\nexport default CategoryLevel1;\n"],"sourceRoot":""}