{"version":3,"sources":["designs/Editor/index.tsx","constants/aspect/index.ts","designs/ButtonNormal/index.tsx","constants/company/size.ts","layouts/ImageUploadLayout/index.tsx","components/MultipleImagesUploader/styles.tsx","components/MultipleImagesUploader/index.tsx","designs/MultiSelect/styles.tsx","designs/MultiSelect/index.tsx","pages/dashboard/employerManagement/Company/components/CareerSelect/index.tsx","pages/dashboard/employerManagement/Company/index.tsx"],"names":["FontAttributor","Quill","import","fontNames","map","font","toLowerCase","replace","whitelist","register","Size","modules","toolbar","align","list","size","Editor","props","initValue","onChange","className","label","name","disabled","required","errorMessage","t","validators","useState","htmlEditor","setHtmlEditor","isError","setIsError","useEffect","id","randomId","variant","error","value","errorMessages","validatorListener","isValid","ASPECT_RATIO_16_9","DesignButton","history","useHistory","to","primary","children","rest","style","padding","onClick","setTimeout","push","companySizes","ImageUploadLayout","onUpload","multiple","accept","htmlFor","type","event","fileList","target","files","length","getFilesFromFileList","useStyles","makeStyles","root","paddingRight","maxWidth","maxHeight","overflow","inputFieldHidden","opacity","position","formHelperText","color","colors","success","margin","marginTop","customHoverDelete","MultipleImagesUploader","images","aspect","imageCrop","maxNumberImage","classes","fileSelected","setFileSelected","displayImages","setDisplayImages","setCroppedFile","openCropImage","setOpenCropImage","mode","setMode","listImages","setListImages","errorText","setErrorText","loadImage","file","a","readFile","imageSrc","listFile","AddImagesUploadButton","ImagePreview","image","index","src","alt","e","preventDefault","newImageList","splice","newDisplayList","handleDeleteImage","SVG","FormHelperText","ImageCropper","isOpen","onClose","onConfirm","base64File","selectStyles","menu","base","zIndex","background","white","fontWeight","multiValue","backgroundColor","secondary","marginLeft","borderRadius","multiValueLabel","lineHeight","fontSize","multiValueRemove","menuList","display","gridTemplateColumns","gridColumnGap","group","marginBottom","gridColumn","groupHeading","option","black","placeholder","body","theme","themeConfig","spacing","controlHeight","baseUnit","primary25","primary50","primary75","MultiSelect","options","maximumItems","selectedOptions","setSelectedOptions","setOptionList","defaultSelected","item","title","_id","defaultOptionList","closeMenuOnSelect","backspaceRemovesValue","components","IndicatorSeparator","ClearIndicator","styles","isMulti","optionValues","newOptionList","toString","CareerSelect","company","onChangeCareer","useSelector","state","newsConfig","allCategoryLevel1","results","totalCountLevel1","totalCount","categoryLv2","allCategoryLevel2","totalCountLevel2","companyCareer","data","setData","pageNumberLevel1","setPageNumberLevel1","pageNumberLevel2","setPageNumberLevel2","listCategoryLevel1","setListCategoryLevel1","listCategoryLevel2","setListCategoryLevel2","dispatch","useDispatch","getCompanyById","createListCategoryLevel1","createListCategoryLevel2","getAllCategoryLevel1API","getAllCategoryLevel2API","renderData","listCategorylv1","listCategorylv2","draftData","category1","i","draftGroup","category2","categoryLevel1","text","payload","filterCategoryLevel1","page","getAllCategoryLevel1","filterCategoryLevel2","getAllCategoryLevel2","career","listId","ActionCompanyPage","location","listUser","employerCreated","common","actionSuccess","editFieldCompany","setEditFieldCompany","user","setUser","formFieldCompany","setFormFieldCompany","sizeSelected","setSizeSelected","accuracy","setAccuracy","highlight","setHighlight","listImage","setListImage","urlImages","setUrlImages","resetAction","pathname","PATH","MANAGE_EMPLOYER","SELF","isIdentified","imgs","img","url","default","medium","small","listUrlImage","setupBreadcrumb","setBreadcrumb","handleChangeCompanyInput","ADD","ACCOUNT","onSubmit","customLogo","logo","customImageCreate","input","customSizeForUploadLogo","CUSTOM_SIZE_UPLOAD_LOGO","customSizeForUploadImage","CUSTOM_SIZE_UPLOAD_PAGE_IMAGE","inputUpdate","code","phoneNumber","contactName","videos","description","companyUpdateInput","updateCompany","companyCreateInput","createCompany","Input","validates","matchRegexp","regexp","regexPhoneNumber","Select","onSelectOption","SingleImageUploader","customImage","regexUrl","Checkbox","isChecked","isCheck"],"mappings":"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","file":"static/js/38.0445268b.chunk.js","sourcesContent":["import { FormControl, FormHelperText } from \"@material-ui/core\";\nimport { randomId } from \"common/functions\";\nimport React, { useEffect, useState } from \"react\";\nimport { TextValidator } from \"react-material-ui-form-validator\";\nimport ReactQuill, { Quill } from \"react-quill\";\nimport { t } from \"language\";\nimport \"react-quill/dist/quill.snow.css\";\n\nconst FontAttributor = Quill.import(\"attributors/class/font\");\nconst fonts = [\"SF Pro Text\"];\nconst fontNames = fonts.map(font => font.toLowerCase().replace(/\\s/g, \"-\"));\nFontAttributor.whitelist = fontNames;\nQuill.register(FontAttributor, true);\n\nconst Size = Quill.import(\"attributors/style/size\");\nconst sizes = [\"14px\", \"16px\", \"18px\", \"22px\"];\nSize.whitelist = sizes;\nQuill.register(Size, true);\n\nconst modules = {\n    toolbar: [\n        [\"bold\", \"italic\", \"underline\"],\n        [{ align: \"\" }, { align: \"center\" }, { align: \"right\" }],\n        [{ list: \"ordered\" }],\n        [\"link\", \"image\"],\n        [{ size: [\"14px\", \"16px\", \"18px\", \"22px\"] }],\n    ],\n};\n\ninterface IEditorProps {\n    initValue?: string;\n    className?: string;\n    label?: string;\n    name?: string;\n    onChange: (text: string, name: string) => void;\n    disabled?: boolean;\n    required?: boolean;\n    errorMessage?: string;\n}\n\nconst Editor: React.FC<IEditorProps> = props => {\n    const {\n        initValue = \"\",\n        onChange,\n        className = \"\",\n        label,\n        name = \"\",\n        disabled = false,\n        required = false,\n        errorMessage = t(\"common.select-required\"),\n    } = props;\n    const validators = required ? [\"required\"] : [];\n\n    const [htmlEditor, setHtmlEditor] = useState<string>(\"\");\n    const [isError, setIsError] = useState(false);\n\n    useEffect(() => {\n        if (initValue) {\n            setHtmlEditor(initValue);\n        } else {\n            setHtmlEditor(\"\");\n        }\n    }, [initValue]);\n\n    const handlerChange = (value: string) => {\n        setHtmlEditor(value);\n        onChange(value, name);\n    };\n\n    const id = randomId();\n    const handleValidate = (isValid: boolean) => {\n        if (isValid) {\n            isError && setIsError(false);\n        } else {\n            !isError && setIsError(true);\n        }\n    };\n\n    return (\n        <>\n            <div className={`quill-wrap ${className}`}>\n                <FormControl\n                    variant=\"outlined\"\n                    className=\"w-full\"\n                    error={isError}\n                    disabled={disabled}\n                >\n                    <span className=\"font-medium text-lg block mb-0.5\">\n                        {label}\n                    </span>\n                    <ReactQuill\n                        modules={modules}\n                        value={htmlEditor}\n                        onChange={handlerChange}\n                    />\n                    {isError && (\n                        <FormHelperText\n                            className=\"font-sfpro\"\n                            error\n                            variant=\"outlined\"\n                        >\n                            {errorMessage}\n                        </FormHelperText>\n                    )}\n                </FormControl>\n            </div>\n            {required && (\n                <TextValidator\n                    value={htmlEditor}\n                    name={id}\n                    className=\"hidden\"\n                    errorMessages={[errorMessage]}\n                    validators={validators}\n                    validatorListener={handleValidate}\n                />\n            )}\n        </>\n    );\n};\n\nexport default Editor;\n","export const ASPECT_RATIO_16_9 = 16 / 9;\n","import React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface DesignButtonProps\n    extends DetailedHTMLProps<\n        ButtonHTMLAttributes<HTMLButtonElement>,\n        HTMLButtonElement\n    > {\n    className?: string;\n    to?: string;\n    primary?: boolean;\n}\n\nconst DesignButton: React.FC<DesignButtonProps> = props => {\n    const history = useHistory();\n    const { to, className = \"\", primary, children, ...rest } = props;\n\n    const handleClick = () => {\n        if (to) {\n            setTimeout(() => {\n                history.push(to);\n            }, 300);\n        }\n    };\n    return (\n        <div\n            className={`flex justify-center items-center cursor-pointer ${className}`}\n        >\n            <Button\n                className=\"h-full w-full\"\n                style={{ padding: \"0\" }} // because padding is overwrite when use class\n                onClick={handleClick}\n                {...(rest as any)}\n            >\n                <div\n                    className={`flex items-center font-sfpro text-lg font-medium justify-center \n                    w-full h-full leading-none normal-case ${\n                        primary ? \"text-white\" : \"text-primary\"\n                    }`}\n                >\n                    {children}\n                </div>\n            </Button>\n        </div>\n    );\n};\n\nexport default DesignButton;\n","export const companySizes = [\n    {\n        name: \"Ít hơn 10\",\n    },\n    {\n        name: \"10 - 24\",\n    },\n    {\n        name: \"25 - 99\",\n    },\n    {\n        name: \"100 - 499\",\n    },\n    {\n        name: \"500 - 999\",\n    },\n    {\n        name: \"1000 - 4999\",\n    },\n    {\n        name: \"5000 - 9999\",\n    },\n    {\n        name: \"Trên 10000\",\n    },\n];\n","import React, { useState } from \"react\";\nimport { randomId } from \"common/functions\";\nimport { getFilesFromFileList } from \"common/functions/file\";\n\nimport ButtonWrapper from \"designs/ButtonWrapper\";\n\ninterface IImageUploadLayoutProps {\n    className?: string;\n    onUpload?: (files: File[]) => void;\n    multiple?: boolean;\n    accept?: string;\n    disabled?: boolean;\n}\n\nconst ImageUploadLayout: React.FC<IImageUploadLayoutProps> = props => {\n    const {\n        className = \"\",\n        children,\n        onUpload,\n        multiple = false,\n        disabled = false,\n        accept = \"image/*\",\n    } = props;\n    const [id, setId] = useState(randomId());\n\n    const handleUploadRawImages = (\n        event: React.ChangeEvent<HTMLInputElement>,\n    ) => {\n        const fileList = event.target.files;\n        if (!fileList?.length) return;\n        const files = getFilesFromFileList(fileList);\n        onUpload && onUpload(files);\n    };\n\n    return (\n        <label className={`cursor-pointer w-full ${className}`} htmlFor={id}>\n            {children}\n            <input\n                accept={accept}\n                className=\"absolute opacity-0 -z-1\"\n                id={id}\n                multiple\n                disabled={disabled}\n                type=\"file\"\n                onChange={handleUploadRawImages}\n            />\n        </label>\n    );\n};\n\nexport default ImageUploadLayout;\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport { colors } from \"common/styles/colors\";\n\nexport const useStyles = makeStyles({\n    root: {\n        \"& .MuiInputLabel-outlined:not(.MuiInputLabel-shrink)\": {\n            paddingRight: \"28px\",\n            maxWidth: \"100%\",\n            maxHeight: \"calc(100% - 20px)\",\n            overflow: \"hidden\",\n        },\n    },\n    inputFieldHidden: {\n        opacity: 0,\n        position: \"absolute\",\n    },\n    formHelperText: {\n        color: colors.success,\n        margin: \"0 14px\",\n        marginTop: \"3px\",\n    },\n    customHoverDelete: {\n        \"& .delete\": {\n            opacity: 0,\n        },\n        \"&:hover\": {\n            \"& .delete\": {\n                opacity: 1,\n            },\n        },\n    },\n});\n","import React, { useState, useEffect, useRef, ChangeEvent } from \"react\";\nimport ImageCropper from \"components/ImageCropper\";\nimport { IBase64Image } from \"common/formatTypes\";\nimport { AddImage } from \"designs/Icons/index\";\nimport { t } from \"language\";\nimport { filterTextFromHtmlString, randomId, readFile } from \"common/functions\";\nimport ImageUploadLayout from \"layouts/ImageUploadLayout\";\nimport IconButton from \"designs/IconButton\";\nimport { FormHelperText } from \"@material-ui/core\";\nimport { TextValidator } from \"react-material-ui-form-validator\";\nimport { useStyles } from \"./styles\";\nimport SVG from \"designs/SVG\";\nexport type IImage = File | string | undefined | null;\n\ninterface ISingleImageUploaderProps {\n    className?: string;\n    images: IImage[];\n    onChange?: (images: any[]) => void;\n    /**\n     * @example aspect={16/9}\n     */\n    aspect?: number;\n    imageCrop?: boolean;\n    required?: boolean;\n    errorMessage?: string;\n    maxNumberImage?: number;\n}\n\ntype IMode = \"ADD_IMAGE\" | \"CHANGE_IMAGE\" | \"REMOVE_IMAGE\" | \"\";\n\nconst MultipleImagesUploader: React.FC<ISingleImageUploaderProps> = props => {\n    const {\n        images = [],\n        aspect = 1,\n        onChange,\n        className = \"\",\n        imageCrop = true,\n        maxNumberImage = 999,\n        required = false,\n        errorMessage,\n    } = props;\n\n    const classes = useStyles();\n    const validators = required ? [\"required\"] : [];\n    const [fileSelected, setFileSelected] = useState<File | undefined>();\n    const [displayImages, setDisplayImages] = useState<\n        IBase64Image[] | string[]\n    >([]);\n    const [croppedFile, setCroppedFile] = useState<File | null>(null);\n    const [openCropImage, setOpenCropImage] = useState(false);\n    const [id, setId] = useState(randomId());\n    const [mode, setMode] = useState<IMode>(\"\");\n    const [listImages, setListImages] = useState<IImage[]>([]);\n    const [isError, setIsError] = useState(false);\n    const [errorText, setErrorText] = useState(\"\");\n\n    useEffect(() => {\n        if (images) {\n            setDisplayImages(images as string[]);\n            setListImages(images);\n        }\n    }, [images]);\n\n    useEffect(() => {\n        if (listImages?.length <= maxNumberImage) {\n            errorText && setErrorText(\"\");\n        }\n    }, [listImages]);\n\n    const handleCloseImageCropper = () => {\n        setOpenCropImage(false);\n    };\n\n    const handleCroppedImage = (file: File, base64File: string) => {\n        if (mode === \"ADD_IMAGE\") {\n            setDisplayImages([...displayImages, base64File]);\n            onChange && onChange([...images, file]);\n            setCroppedFile(file);\n        } else if (mode === \"CHANGE_IMAGE\") {\n        }\n        setOpenCropImage(false);\n    };\n    const loadImage = async (file: File) => {\n        const imageSrc = await readFile(file);\n        setDisplayImages([...displayImages, imageSrc as string]);\n        const listFile = [...listImages, file];\n        setListImages(listFile);\n        onChange && onChange(listFile);\n    };\n    const handleUploadAddNewFile = (files: File[]) => {\n        const file = files[0];\n        setMode(\"ADD_IMAGE\");\n        setFileSelected(file);\n\n        if (listImages.length >= maxNumberImage) {\n            setErrorText(\n                `${t(\"common.validate-max-images\")}! (${maxNumberImage} ${t(\n                    \"common.images\",\n                )})`,\n            );\n            return;\n        }\n\n        if (imageCrop) {\n            setOpenCropImage(true);\n        } else {\n            loadImage(file);\n        }\n    };\n    const handleDeleteImage = (e: any, index: number) => {\n        e.preventDefault();\n        if (displayImages?.length > 0) {\n            const newImageList = [...listImages];\n            newImageList?.splice(index, 1);\n            setListImages(newImageList);\n            onChange && onChange(newImageList);\n\n            const newDisplayList = [...displayImages];\n            newDisplayList?.splice(index, 1);\n            setDisplayImages(newDisplayList);\n        }\n    };\n    const handleValidate = (isValid: boolean) => {\n        if (isValid) {\n            isError && setIsError(false);\n        } else {\n            !isError && setIsError(true);\n        }\n    };\n\n    const AddImagesUploadButton: React.FC = () => (\n        <div className=\"py-2 text-center rounded default-display\">\n            <div className=\"icon\">\n                <AddImage className=\"block m-auto\" />\n            </div>\n            <p className=\"mt-1 text-sm font-normal text-body info phone:text-lg\">\n                {t(\"common.upload-image\")}\n            </p>\n        </div>\n    );\n    interface IImagePreview {\n        image: string;\n        index: number;\n    }\n    const ImagePreview: React.FC<IImagePreview> = props => {\n        const { image, index } = props;\n        return (\n            <div\n                className={`relative flex items-center justify-center duration-300  hover:opacity-60 w-11 h-11 img-wrapper ${classes.customHoverDelete}`}\n            >\n                <img\n                    src={image}\n                    className={`block object-cover w-full h-full`}\n                    alt=\"img-display\"\n                />\n                <div\n                    className={`absolute delete top-0 left-0 flex  duration-300 items-center justify-center w-full h-full `}\n                >\n                    <p\n                        onClick={e => handleDeleteImage(e, index)}\n                        className=\"flex items-center justify-center p-0.5 rounded-md text-body bg-lightGray\"\n                    >\n                        <SVG name=\"common/delete\" />\n                    </p>\n                </div>\n            </div>\n        );\n    };\n\n    return (\n        <>\n            <div\n                className={`w-full h-auto input-display border border-dashed border-body  p-1.5  ${className} `}\n            >\n                <ImageUploadLayout\n                    onUpload={handleUploadAddNewFile}\n                    disabled={displayImages.length >= maxNumberImage}\n                >\n                    <ul\n                        className={`flex flex-wrap items-center ${\n                            displayImages.length > 4\n                                ? \"justify-start\"\n                                : \"justify-center\"\n                        } w-full h-full gap-1 bg-white`}\n                    >\n                        {displayImages.length > 0 ? (\n                            <>\n                                {displayImages.map((image, index) => (\n                                    <li className=\"w-11 h-11\">\n                                        <ImagePreview\n                                            image={image}\n                                            index={index}\n                                        />\n                                    </li>\n                                ))}\n                            </>\n                        ) : (\n                            <AddImagesUploadButton />\n                        )}\n                    </ul>\n                </ImageUploadLayout>\n                {displayImages.length >= maxNumberImage ? (\n                    <p className=\"mt-0.5 text-sm font-semibold text-body text-center leading-none\">\n                        {t(\"common.validate-max-images\")}\n                    </p>\n                ) : null}\n            </div>\n            {isError && (\n                <FormHelperText className={classes.formHelperText}>\n                    {errorMessage}\n                </FormHelperText>\n            )}\n            {required && (\n                <TextValidator\n                    value={displayImages ? id : \"\"}\n                    name={id}\n                    validators={validators}\n                    errorMessages={[errorMessage]}\n                    className={classes.inputFieldHidden}\n                    validatorListener={handleValidate}\n                />\n            )}\n            {imageCrop && (\n                <ImageCropper\n                    aspect={aspect}\n                    image={fileSelected}\n                    isOpen={openCropImage}\n                    onClose={handleCloseImageCropper}\n                    onConfirm={handleCroppedImage}\n                />\n            )}\n        </>\n    );\n};\n\nexport default MultipleImagesUploader;\n","import { colors } from \"common/styles/colors\";\nexport const selectStyles = {\n    menu: (base: any) => ({\n        ...base,\n        zIndex: 99,\n        background: colors.white,\n        fontWeight: \"400\",\n    }),\n    multiValue: (base: any) => ({\n        ...base,\n        backgroundColor: colors.secondary,\n        marginLeft: \"10px\",\n        color: colors.white,\n        borderRadius: \"0px\",\n    }),\n    multiValueLabel: (base: any) => ({\n        ...base,\n        color: colors.white,\n        lineHeight: \"1\",\n        fontSize: \"13px\",\n        fontWeight: \"400\",\n    }),\n    multiValueRemove: (base: any) => ({\n        ...base,\n        lineHeight: \"1\",\n    }),\n    menuList: (base: any) => ({\n        maxHeight: \"350px\",\n        overflow: \"auto\",\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(12, minmax(0, 1fr))\",\n        gridColumnGap: \"90px\",\n        padding: \"10px\",\n    }),\n    group: (base: any) => ({\n        marginBottom: \"20px\",\n        gridColumn: \"span 4 / span 4\",\n    }),\n    groupHeading: (base: any) => ({\n        background: colors.white,\n        color: colors.primary,\n        fontSize: \"16px\",\n        padding: \"10px 20px\",\n    }),\n    option: (base: any) => ({\n        ...base,\n        padding: \"10px 20px\",\n        background: colors.white,\n        color: colors.black,\n        fontSize: \"14px\",\n    }),\n    placeholder: (base: any) => ({\n        ...base,\n        color: colors.body,\n    }),\n};\n\nexport const theme = (themeConfig: any) => ({\n    ...themeConfig,\n    spacing: {\n        ...themeConfig.spacing,\n        controlHeight: 50,\n        baseUnit: 4,\n    },\n    colors: {\n        ...themeConfig.colors,\n        primary25: \"rgba(36, 0, 70, 0.15)\",\n        primary50: \"rgba(36, 0, 70, 0.50)\",\n        primary75: \"rgba(36, 0, 70, 0.75)\",\n        primary: \"#240046\",\n    },\n});\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable react/destructuring-assignment */\nimport { FormHelperText } from \"@material-ui/core\";\nimport { randomId } from \"common/functions\";\nimport Option from \"designs/OptionCheckbox\";\nimport { t } from \"language\";\nimport React, { useEffect, useState } from \"react\";\nimport { TextValidator } from \"react-material-ui-form-validator\";\nimport Select, { components, ValueType } from \"react-select\";\nimport { selectStyles, theme } from \"./styles\";\n\nexport interface ISelectValue {\n    value?: string;\n    label?: string;\n}\n\ntype IOption = Record<any, any>;\n\ninterface ISelect2 {\n    label: string;\n    value?: IOption[];\n    options: IOption[];\n    className?: string;\n    onChange?: (value: ISelectValue[]) => void;\n    required?: boolean;\n    placeholder?: string;\n    errorMessage?: string;\n    maximumItems?: number;\n}\n\nconst MultiSelect: React.FC<ISelect2> = props => {\n    const {\n        label,\n        value = [],\n        options = [],\n        className = \"\",\n        onChange,\n        required = true,\n        placeholder = \"\",\n        maximumItems = 99999,\n        errorMessage = t(\"common.select-required\"),\n    } = props;\n    const validators = required ? [\"required\"] : [];\n\n    const [id, setId] = useState<string>(randomId());\n    const [isError, setIsError] = useState(false);\n    const [selectedOptions, setSelectedOptions] = useState<ISelectValue[]>([]);\n    const [optionList, setOptionList] = useState<ISelectValue[]>([]);\n\n    useEffect(() => {\n        if (value.length > 0) {\n            const defaultSelected: ISelectValue[] = value.map(item => ({\n                label: item?.name || item?.title,\n                value: item?._id,\n            }));\n            setSelectedOptions(defaultSelected);\n        }\n    }, [value]);\n\n    useEffect(() => {\n        if (options.length > 0) {\n            const defaultOptionList: ISelectValue[] = options.map(item => ({\n                label: item?.name || item?.title,\n                value: item?._id,\n            }));\n            setOptionList(defaultOptionList);\n        }\n    }, [options]);\n\n    const handleChangeSelect = (\n        optionValues: ValueType<ISelectValue, true>,\n    ) => {\n        const newOptionList = optionValues as ISelectValue[];\n        if (newOptionList.length > maximumItems) {\n            return;\n        }\n        setSelectedOptions(newOptionList);\n        onChange?.(newOptionList);\n    };\n\n    const handleValidate = (isValid: boolean) => {\n        if (isValid) {\n            isError && setIsError(false);\n        } else {\n            !isError && setIsError(true);\n        }\n    };\n\n    return (\n        <div className={`tags-input-wrapper ${className}`}>\n            <div className=\"w-full\">\n                <div className=\"text-lg font-medium flex mb-0.5\">\n                    {label}&nbsp;\n                    <p className={`text-error ${required ? \"\" : \"hidden\"}`}>\n                        *\n                    </p>\n                </div>\n                <Select\n                    closeMenuOnSelect={false}\n                    backspaceRemovesValue={false}\n                    // hideSelectedOptions={false}\n                    components={{\n                        IndicatorSeparator: null,\n                        ClearIndicator: null,\n                    }}\n                    styles={selectStyles}\n                    name=\"name\"\n                    theme={theme}\n                    isMulti\n                    options={options}\n                    value={selectedOptions}\n                    placeholder={placeholder}\n                    onChange={handleChangeSelect}\n                />\n            </div>\n            {isError && (\n                <FormHelperText error variant=\"standard\">\n                    {errorMessage}\n                </FormHelperText>\n            )}\n            {required && (\n                <TextValidator\n                    value={\n                        selectedOptions.length > 0\n                            ? selectedOptions.toString()\n                            : \"\"\n                    }\n                    name={id}\n                    validators={validators}\n                    errorMessages={[errorMessage]}\n                    className=\"hidden\"\n                    validatorListener={handleValidate}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default MultiSelect;\n","import React, { useEffect, useState } from \"react\";\nimport {\n    IRootState,\n    ICompany,\n    IGetAllCategoryLevel1,\n    IGetCategoryLv2,\n    ICategoryLv2,\n    ICategoryLevel1,\n} from \"common/formatTypes\";\nimport { t } from \"language\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    getAllCategoryLevel1,\n    getAllCategoryLevel2,\n} from \"redux/actions/newsConfig\";\nimport MultiSelect, { ISelectValue } from \"designs/MultiSelect\";\nimport { getCompanyById } from \"redux/actions/company\";\n\ninterface IBenefitSelectProps {\n    className?: string;\n    onChangeCareer?: (option: string[]) => void;\n    company?: ICompany | null;\n}\n\nconst CareerSelect: React.FC<IBenefitSelectProps> = props => {\n    const { company, className = \"\", onChangeCareer } = props;\n\n    const {\n        allCategoryLevel1: {\n            results: allCategoryLevel1,\n            totalCount: totalCountLevel1,\n        },\n    } = useSelector((state: IRootState) => state.newsConfig);\n    const {\n        categoryLv2: {\n            results: allCategoryLevel2,\n            totalCount: totalCountLevel2,\n        },\n    } = useSelector((state: IRootState) => state.newsConfig);\n    const { company: companyCareer = {} } = useSelector(\n        (state: IRootState) => state.company,\n    );\n\n    const [data, setData] = useState<any>([]);\n    const [pageNumberLevel1, setPageNumberLevel1] = useState<number>(0);\n    const [pageNumberLevel2, setPageNumberLevel2] = useState<number>(0);\n    const [listCategoryLevel1, setListCategoryLevel1] = useState<\n        ICategoryLevel1[]\n    >([]);\n    const [listCategoryLevel2, setListCategoryLevel2] = useState<\n        ICategoryLv2[]\n    >([]);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (company) {\n            dispatch(getCompanyById({ id: company?._id! }));\n        }\n    }, [company]);\n\n    useEffect(() => {\n        createListCategoryLevel1();\n    }, [allCategoryLevel1]);\n\n    useEffect(() => {\n        createListCategoryLevel2();\n    }, [allCategoryLevel2]);\n\n    useEffect(() => {\n        getAllCategoryLevel1API();\n    }, [pageNumberLevel1]);\n\n    useEffect(() => {\n        getAllCategoryLevel2API();\n    }, [pageNumberLevel2]);\n\n    useEffect(() => {\n        renderData(listCategoryLevel1, listCategoryLevel2);\n    }, [allCategoryLevel1, allCategoryLevel2]);\n\n    const renderData = (\n        listCategorylv1: ICategoryLevel1[],\n        listCategorylv2: ICategoryLv2[],\n    ) => {\n        let draftData = [];\n\n        for (const category1 of listCategorylv1) {\n            draftData.push({\n                label: category1.name,\n                options: [] as any,\n            });\n        }\n        for (let i = 0; i < draftData.length; i++) {\n            for (const category1 of listCategorylv1) {\n                let draftGroup = [];\n                for (const category2 of listCategorylv2) {\n                    if (category2?.categoryLevel1?.name === category1.name) {\n                        draftGroup.push({\n                            label: category2.name,\n                            value: category2._id,\n                        });\n                    }\n                    if (category1.name === draftData[i].label) {\n                        draftData[i].options = draftGroup;\n                    }\n                }\n            }\n        }\n\n        setData(draftData);\n    };\n\n    const getAllCategoryLevel1API = (text: string = \"\") => {\n        const payload: IGetAllCategoryLevel1 = {\n            filterCategoryLevel1: {\n                name: text,\n            },\n            page: pageNumberLevel1,\n        };\n        dispatch(getAllCategoryLevel1(payload));\n    };\n\n    const getAllCategoryLevel2API = (text: string = \"\") => {\n        const payload: IGetCategoryLv2 = {\n            filterCategoryLevel2: {\n                name: text,\n            },\n            page: pageNumberLevel2,\n        };\n        dispatch(getAllCategoryLevel2(payload));\n    };\n\n    const createListCategoryLevel1 = () => {\n        // Add data\n        const draftData: ICategoryLevel1[] = listCategoryLevel1;\n        draftData.push(...allCategoryLevel1);\n        setListCategoryLevel1(draftData);\n\n        //Decrease page number\n        if (listCategoryLevel1.length < totalCountLevel1) {\n            setPageNumberLevel1(pageNumberLevel1 + 1);\n        }\n    };\n\n    const createListCategoryLevel2 = () => {\n        // Add data\n        const draftData: ICategoryLv2[] = listCategoryLevel2;\n        draftData.push(...allCategoryLevel2);\n        setListCategoryLevel2(draftData);\n\n        //Decrease page number\n        if (listCategoryLevel2.length < totalCountLevel2) {\n            setPageNumberLevel2(pageNumberLevel2 + 1);\n        }\n    };\n\n    const handleCareerSelected = (options: ISelectValue[]) => {\n        const listId = options.map(item => item.value!);\n        onChangeCareer?.(listId);\n    };\n\n    return (\n        <div className={`${className}`}>\n            <MultiSelect\n                label={t(\"manageEmployer.company.career\")}\n                value={companyCareer?.career}\n                options={data}\n                required={false}\n                onChange={handleCareerSelected}\n                maximumItems={3}\n                errorMessage={t(\"common.validate-required\")}\n            />\n        </div>\n    );\n};\n\nexport default CareerSelect;\n","import React, { useEffect, useState } from \"react\";\nimport { RouteComponentProps, useHistory } from \"react-router-dom\";\n\nimport { ValidatorForm } from \"react-material-ui-form-validator\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n    IUser,\n    ICompanyInput,\n    IUpdateCompany,\n    ICompany,\n    ICreateCompany,\n    IRootState,\n    IUpdateCompanyInput,\n    ICustomUploadInput,\n} from \"common/formatTypes\";\nimport { regexPhoneNumber, regexUrl } from \"common/functions/string/regex\";\n\nimport { companySizes } from \"constants/company\";\nimport { PATH } from \"constants/routes\";\nimport { ASPECT_RATIO_16_9 } from \"constants/aspect\";\nimport {\n    CUSTOM_SIZE_UPLOAD_LOGO,\n    CUSTOM_SIZE_UPLOAD_PAGE_IMAGE,\n} from \"constants/image\";\n\nimport MultipleImagesUploader, {\n    IImage,\n} from \"components/MultipleImagesUploader\";\nimport SingleImageUploader from \"components/SingleImageUploader\";\n\nimport Button from \"designs/ButtonNormal\";\nimport Input from \"designs/Input\";\nimport Select from \"designs/Select\";\n\nimport TextArea from \"designs/TextArea\";\nimport SVG from \"designs/SVG\";\nimport Checkbox from \"designs/Checkbox\";\n\nimport { createCompany, updateCompany } from \"redux/actions/company\";\nimport { setBreadcrumb } from \"redux/actions/_config\";\nimport { t } from \"language\";\nimport { resetAction } from \"redux/actions/common\";\nimport Editor from \"designs/Editor\";\nimport CareerSelect from \"./components/CareerSelect\";\n\nconst ActionCompanyPage: React.FC<RouteComponentProps> = props => {\n    const state = props.location.state as IUser;\n    const { employerCreated = {} } = useSelector(\n        (state: IRootState) => state.listUser,\n    );\n    const { actionSuccess } = useSelector((state: IRootState) => state.common);\n    const [editFieldCompany, setEditFieldCompany] = useState<ICompany>();\n    const [user, setUser] = useState<IUser>();\n    const [formFieldCompany, setFormFieldCompany] = useState<ICompanyInput>({});\n    const [sizeSelected, setSizeSelected] = useState(\"\");\n    const [accuracy, setAccuracy] = useState(false);\n    const [highlight, setHighlight] = useState(false);\n    const [listImage, setListImage] = useState<ICustomUploadInput[]>([]);\n    const [urlImages, setUrlImages] = useState<string[]>([]);\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    useEffect(() => {\n        if (actionSuccess) {\n            dispatch(resetAction());\n            history.push({\n                pathname: PATH.MANAGE_EMPLOYER.SELF,\n            });\n        }\n    }, [actionSuccess]);\n    useEffect(() => {\n        if (state) {\n            if (state?.company) {\n                setEditFieldCompany(state.company);\n                state?.company?.highlight &&\n                    setHighlight(state?.company?.highlight);\n                state?.company?.isIdentified &&\n                    setAccuracy(state?.company?.isIdentified);\n                const imgs = state?.company?.images?.map(img => ({\n                    type: \"STRING\",\n                    url: {\n                        default: img.default,\n                        medium: img.medium,\n                        small: img.small,\n                    },\n                })) as ICustomUploadInput[];\n                setListImage(imgs);\n\n                const listUrlImage = state?.company?.images?.map(\n                    img => img.default || \"\",\n                );\n                setUrlImages(listUrlImage || []);\n            }\n            setUser(state);\n        }\n        setupBreadcrumb();\n    }, [state]);\n\n    const setupBreadcrumb = () => {\n        dispatch(\n            setBreadcrumb([\n                {\n                    name: t(\"breadcrumb.add-employer\"),\n                },\n            ]),\n        );\n    };\n\n    const onChangeCareer = (career: string[]) => {\n        setFormFieldCompany(state => ({ ...state, career }));\n    };\n\n    const handleSubmitCompany = () => {\n        const customLogo: ICustomUploadInput = {\n            type: \"STRING\",\n            url: {\n                default: editFieldCompany?.logo?.default,\n                small: editFieldCompany?.logo?.small,\n                medium: editFieldCompany?.logo?.medium,\n            },\n        };\n\n        if (formFieldCompany?.logo) {\n            customLogo.file = formFieldCompany?.logo;\n            (customLogo.type = \"FILE\"), delete customLogo.url;\n        }\n\n        const customImageCreate: File[] = listImage?.map(image => image.file!);\n        const input: ICompanyInput = {\n            ...formFieldCompany,\n            customSizeForUploadLogo: CUSTOM_SIZE_UPLOAD_LOGO,\n            images: customImageCreate,\n            customSizeForUploadImage: CUSTOM_SIZE_UPLOAD_PAGE_IMAGE,\n        };\n\n        const inputUpdate: IUpdateCompanyInput = {\n            career: formFieldCompany?.career,\n            code: formFieldCompany?.code,\n            name: formFieldCompany?.name,\n            phoneNumber: formFieldCompany?.phoneNumber,\n            contactName: formFieldCompany?.contactName,\n            size: formFieldCompany?.size,\n            videos: formFieldCompany?.videos,\n            description: formFieldCompany?.description,\n            logo: customLogo,\n            images: listImage,\n            highlight: formFieldCompany?.highlight,\n            isIdentified: formFieldCompany?.isIdentified,\n        };\n        if (editFieldCompany) {\n            const payload: IUpdateCompany = {\n                id: editFieldCompany?._id!,\n                companyUpdateInput: inputUpdate,\n            };\n            dispatch(updateCompany(payload));\n        } else {\n            const payload: ICreateCompany = {\n                companyCreateInput: {\n                    ...input,\n                    user: employerCreated?._id || user?._id,\n                },\n            };\n            dispatch(createCompany(payload));\n        }\n    };\n\n    const handleChangeCompanyInput = (\n        // using for all input have value with type below:\n        value = \"\",\n        name?: string,\n    ) => {\n        name && setFormFieldCompany({ ...formFieldCompany, [name]: value });\n    };\n\n    const handleBack = () => {\n        history.push({\n            pathname: PATH.MANAGE_EMPLOYER.ADD.ACCOUNT,\n            state,\n        });\n    };\n    const handleChangeListImage = (images: ICustomUploadInput[]) => {\n        const customImage = images?.map(img => {\n            if (typeof img === \"string\") {\n                return {\n                    type: \"STRING\",\n                    url: {\n                        default: img,\n                        medium: img,\n                        small: img,\n                    },\n                };\n            }\n            return {\n                type: \"FILE\",\n                file: img,\n            };\n        }) as ICustomUploadInput[];\n        setListImage(customImage);\n    };\n\n    return (\n        <div className=\"w-full\">\n            <h1 className=\"flex items-center mb-3 font-semibold leading-none text-xxl gap-x-3\">\n                <SVG\n                    name=\"common/back\"\n                    onClick={handleBack}\n                    className=\"cursor-pointer\"\n                />\n                {t(\"manageEmployer.add-employer\")}\n            </h1>\n            <h2 className=\"text-xl font-bold leading-none text-primary\">\n                {t(\"manageEmployer.company.title\")}\n            </h2>\n            <ValidatorForm\n                onSubmit={handleSubmitCompany}\n                className=\"mt-2 font-medium font-sfpro\"\n            >\n                <div className=\"grid grid-cols-2 gap-2\">\n                    <div className=\"flex flex-col col-span-2 laptop:col-span-1 gap-y-2\">\n                        <Input\n                            label={t(\"manageEmployer.company.name\")}\n                            value={editFieldCompany?.name}\n                            name=\"name\"\n                            placeholder={t(\"manageEmployer.company.name\")}\n                            onChange={handleChangeCompanyInput}\n                            validates={{\n                                required: {\n                                    errorMessage: t(\n                                        \"manageEmployer.error.company.name\",\n                                    ),\n                                },\n                            }}\n                        />\n                        <Input\n                            label={t(\"manageEmployer.company.phone-number\")}\n                            type=\"number\"\n                            value={editFieldCompany?.phoneNumber}\n                            name=\"phoneNumber\"\n                            placeholder={t(\n                                \"manageEmployer.placeholder.phone-number\",\n                            )}\n                            onChange={handleChangeCompanyInput}\n                            validates={{\n                                required: {\n                                    errorMessage: t(\n                                        \"manageEmployer.error.company.phone-number\",\n                                    ),\n                                },\n                                matchRegexp: {\n                                    regexp: regexPhoneNumber,\n                                    errorMessage: t(\"common.validate-phone\"),\n                                },\n                            }}\n                        />\n                        <Input\n                            label={t(\"manageEmployer.company.code\")}\n                            value={editFieldCompany?.code}\n                            name=\"code\"\n                            type=\"number\"\n                            placeholder={t(\"manageEmployer.placeholder.code\")}\n                            onChange={handleChangeCompanyInput}\n                        />\n                        <Input\n                            label={t(\"manageEmployer.company.contact-name\")}\n                            value={editFieldCompany?.contactName}\n                            name=\"contactName\"\n                            placeholder={t(\n                                \"manageEmployer.placeholder.contact-name\",\n                            )}\n                            onChange={handleChangeCompanyInput}\n                        />\n                        <Select\n                            label={t(\"manageEmployer.company.size\")}\n                            options={companySizes}\n                            value={sizeSelected}\n                            placeholder={t(\"manageEmployer.placeholder.size\")}\n                            onSelectOption={option => {\n                                setSizeSelected(option.name!);\n                                setFormFieldCompany(state => ({\n                                    ...state,\n                                    size: option.name,\n                                }));\n                            }}\n                        />\n                    </div>\n                    <div className=\"flex flex-col col-span-2 laptop:col-span-1 gap-y-2\">\n                        <div>\n                            <p className=\"text-lg font-medium text-black mb-0.5\">\n                                {t(\"manageEmployer.company.logo\")}\n                            </p>\n                            <SingleImageUploader\n                                aspect={ASPECT_RATIO_16_9}\n                                image={\n                                    editFieldCompany?.logo?.default ||\n                                    editFieldCompany?.logo?.small\n                                }\n                                onChange={logo => {\n                                    setFormFieldCompany(state => ({\n                                        ...state,\n                                        logo,\n                                    }));\n                                }}\n                            />\n                        </div>\n                        <div>\n                            <p className=\"text-lg font-medium text-black mb-0.5\">\n                                {t(\"manageEmployer.company.image\")}\n                            </p>\n                            <MultipleImagesUploader\n                                images={urlImages}\n                                onChange={handleChangeListImage}\n                                imageCrop={false}\n                                maxNumberImage={5}\n                            />\n                        </div>\n                        <Input\n                            label={t(\"manageEmployer.company.video\")}\n                            value={editFieldCompany?.videos}\n                            name=\"videos\"\n                            placeholder={t(\"manageEmployer.placeholder.video\")}\n                            onChange={handleChangeCompanyInput}\n                            validates={{\n                                matchRegexp: {\n                                    regexp: regexUrl,\n                                    errorMessage:\n                                        \"Vui lòng nhập đúng định dạng đường dẫn\",\n                                },\n                            }}\n                        />\n                    </div>\n                </div>\n                <CareerSelect\n                    className=\"mt-2\"\n                    onChangeCareer={onChangeCareer}\n                    company={editFieldCompany}\n                />\n                <Editor\n                    className=\"mt-2\"\n                    label={t(\"manageEmployer.company.description\")}\n                    name=\"description\"\n                    initValue={editFieldCompany?.description}\n                    onChange={handleChangeCompanyInput}\n                    required\n                    errorMessage={t(\"manageEmployer.error.company.description\")}\n                />\n                <div className=\"mt-2\">\n                    <Checkbox\n                        label={t(\"manageEmployer.company.is-auth\")}\n                        isChecked={accuracy}\n                        onChange={isCheck => {\n                            setAccuracy(isCheck),\n                                setFormFieldCompany(state => ({\n                                    ...state,\n                                    isIdentified: isCheck,\n                                }));\n                        }}\n                    />\n                </div>\n                <div className=\"mt-2\">\n                    <Checkbox\n                        label={t(\"manageEmployer.company.highlight\")}\n                        isChecked={highlight}\n                        onChange={isCheck => {\n                            setHighlight(isCheck),\n                                setFormFieldCompany(state => ({\n                                    ...state,\n                                    highlight: isCheck,\n                                }));\n                        }}\n                    />\n                </div>\n                <div className=\"flex justify-end mt-3 gap-x-2\">\n                    <Button\n                        className=\"w-16 h-4.5 border border-primary text-primary\"\n                        to={PATH.MANAGE_EMPLOYER.SELF}\n                    >\n                        {t(\"manageEmployer.cancel\")}\n                    </Button>\n                    <Button\n                        type=\"submit\"\n                        className=\"w-16 h-4.5 bg-primary text-white\"\n                        primary\n                    >\n                        {t(\"manageEmployer.done\")}\n                    </Button>\n                </div>\n            </ValidatorForm>\n        </div>\n    );\n};\n\nexport default ActionCompanyPage;\n"],"sourceRoot":""}