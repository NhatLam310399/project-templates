{"version":3,"sources":["common/utils/firebase.ts","designs/InputWithIcon/index.tsx","pages/Login/component/Button/index.tsx","pages/Login/index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","InputWithIcon","props","type","className","initialValue","Icon","valueRef","placeholder","maxLength","onChange","error","onPressEnter","label","required","pattern","minLength","useState","text","setText","randomId","id","htmlFor","value","event","newValue","target","length","slice","current","onKeyDown","e","key","FormHelperText","variant","style","fontSize","DesignButton","history","useHistory","to","children","rest","Button","padding","onClick","setTimeout","push","window","appVerifier","undefined","confirmResult","auth","settings","appVerificationDisabledForTesting","LoginPage","dispatch","useDispatch","isPassPhone","setIsPassPhone","phoneNumber","setPhoneNumber","otpCode","setOtpCode","setNotification","setTypeNotification","errorAction","setErrorAction","currentUser","useSelector","state","handleLoginPhone","phone","a","phoneNumberStandard","setLoading","captchaVerifier","RecaptchaVerifier","size","signInWithPhoneNumber","t","console","handleVerifyOtpCode","otp","confirm","fnSendRequest","getIdToken","idToken","getToken","useEffect","permission","Object","keys","setUserCookies","userInfo","removeUserCookies","actionRemoveCurrentUser","regexPhoneNumber","SVG","name","Icons"],"mappings":"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","file":"static/js/42.e55177b8.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyApTHegj-vL4AD6UV7hqlavK7pvW3KOf5o\",\n    authDomain: \"tuyendungvn-ec100.firebaseapp.com\",\n    databaseURL: \"https://tuyendungvn-ec100-default-rtdb.firebaseio.com\",\n    projectId: \"tuyendungvn-ec100\",\n    storageBucket: \"tuyendungvn-ec100.appspot.com\",\n    messagingSenderId: \"45165647490\",\n    appId: \"1:45165647490:web:6df36b37446ebc2a43869b\",\n    measurementId: \"G-L4S0234ZKC\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport { FormHelperText } from \"@material-ui/core\";\nimport { randomId } from \"common/functions\";\nimport React, { ChangeEvent, useState } from \"react\";\n\ninterface IInputWithIconProps {\n    type?: \"text\" | \"number\";\n    className?: string;\n    initialValue?: string;\n    valueRef?: React.MutableRefObject<string>;\n    Icon: React.ReactNode;\n    placeholder?: string | undefined;\n    error?: string;\n    maxLength?: number;\n    onChange?: (value: string) => void;\n    onPressEnter?: (value: string) => void;\n    label: string;\n    required?: boolean;\n    pattern?: string;\n    minLength?: number;\n}\n\nconst InputWithIcon: React.FC<IInputWithIconProps> = props => {\n    const {\n        type = \"text\",\n        className = \"\",\n        initialValue = \"\",\n        Icon,\n        valueRef,\n        placeholder = \"\",\n        maxLength,\n        onChange,\n        error,\n        onPressEnter,\n        label,\n        required,\n        pattern = \"\",\n        minLength,\n    } = props;\n    const [text, setText] = useState(initialValue);\n    const [id, setId] = useState(randomId());\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        let newValue = event.target.value;\n        if (event.target.value.length > event.target.maxLength) {\n            newValue = event.target.value.slice(0, event.target.maxLength);\n        }\n        setText(newValue);\n        if (valueRef) valueRef.current = newValue;\n        onChange && onChange(newValue);\n    };\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            onPressEnter && onPressEnter(text);\n        }\n    };\n\n    return (\n        <>\n            <div className=\"flex flex-col justify-center\">\n                <label\n                    htmlFor={id}\n                    className=\"mb-0.5 font-bold text-md phone:text-lg\"\n                >\n                    {label}\n                    {required && <span className=\"text-error\">*</span>}\n                </label>\n                <label\n                    htmlFor={id}\n                    className=\"flex flex-row border border-gray mb-0.5 \"\n                >\n                    {Icon ? (\n                        <div className=\"icon-wrapper w-5.5 text-primary font-bold flex items-center justify-center text-md\">\n                            {Icon}\n                        </div>\n                    ) : (\n                        \"\"\n                    )}\n                    <input\n                        id={id}\n                        className={`w-full h-full px-1 py-1.5 text-md font-medium font-sfpro ${className}`}\n                        placeholder={placeholder}\n                        type={type}\n                        value={text}\n                        maxLength={maxLength}\n                        onChange={handleChange}\n                        onKeyDown={handleKeyDown}\n                        pattern={pattern}\n                        minLength={minLength}\n                    />\n                </label>\n            </div>\n            {error && (\n                <FormHelperText\n                    error\n                    variant=\"outlined\"\n                    style={{ fontSize: \"16px\" }}\n                >\n                    {error}\n                </FormHelperText>\n            )}\n        </>\n    );\n};\n\nexport default InputWithIcon;\n","import React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface DesignButtonProps\n    extends DetailedHTMLProps<\n        ButtonHTMLAttributes<HTMLButtonElement>,\n        HTMLButtonElement\n    > {\n    className?: string;\n    to?: string;\n}\n\nconst DesignButton: React.FC<DesignButtonProps> = props => {\n    const history = useHistory();\n    const { to, className = \"\", children, ...rest } = props;\n\n    const handleClick = () => {\n        if (to) {\n            setTimeout(() => {\n                history.push(to);\n            }, 300);\n        }\n    };\n    return (\n        <div\n            className={`button-wrapper border-white border rounded-sm h-full ${className}`}\n        >\n            <Button\n                className=\"w-full\"\n                style={{ padding: \"0\" }} // because padding is overwrite when use class\n                onClick={handleClick}\n                {...(rest as any)}\n            >\n                <div\n                    className=\"flex items-center bg-primary font-sfpro text-lg phone:text-xl font-medium text-white justify-center \n                w-full leading-none rounded-md py-1.5\"\n                >\n                    {children}\n                </div>\n            </Button>\n        </div>\n    );\n};\n\nexport default DesignButton;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport firebase from \"common/utils/firebase\";\nimport \"firebase/auth\";\nimport { t } from \"language\";\nimport { setUserCookies, removeUserCookies } from \"common/utils/auth\";\nimport { IRootState, IPermissionType } from \"common/formatTypes\";\nimport { actionRemoveCurrentUser, getToken } from \"redux/actions/auth\";\nimport InputWithIcon from \"designs/InputWithIcon\";\nimport { setLoading } from \"redux/actions/common\";\nimport SVG from \"designs/SVG\";\nimport * as Icons from \"designs/Icons/index\";\nimport NotificationModal from \"components/NotificationPopup\";\nimport Button from \"./component/Button\";\nimport { regexPhoneNumber } from \"common/functions\";\n\nconst window: {\n    appVerifier: firebase.auth.RecaptchaVerifier | undefined;\n    confirmResult: firebase.auth.ConfirmationResult | undefined;\n} = {\n    appVerifier: undefined,\n    confirmResult: undefined,\n};\n\n// Disable this when Release the product\nfirebase.auth().settings.appVerificationDisabledForTesting = true;\n\nconst LoginPage: React.FC = () => {\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const [isPassPhone, setIsPassPhone] = useState(false);\n    const [phoneNumber, setPhoneNumber] = useState(\"\");\n    const [otpCode, setOtpCode] = useState(\"\");\n    const [notification, setNotification] = useState(\"\");\n    const [typeNotification, setTypeNotification] = useState<\n        \"success\" | \"error\" | \"warning\"\n    >(\"success\");\n    const [errorAction, setErrorAction] = useState(\"\");\n\n    const { currentUser } = useSelector((state: IRootState) => state.auth);\n\n    const handleLoginPhone = async (phone: string) => {\n        const phoneNumberStandard = `+84${phone.slice(1, phone.length)}`;\n        dispatch(setLoading(true));\n        const captchaVerifier = new firebase.auth.RecaptchaVerifier(\"captcha\", {\n            size: \"invisible\",\n        });\n        window.appVerifier = captchaVerifier;\n        try {\n            const confirmResult = await firebase\n                .auth()\n                .signInWithPhoneNumber(phoneNumberStandard, window.appVerifier);\n            if (!confirmResult) {\n                setErrorAction(t(\"login.error-message.invalid-phone-number\"));\n                setTypeNotification(\"error\");\n            }\n            setErrorAction(\"\");\n            setIsPassPhone(true);\n            dispatch(setLoading(false));\n            window.confirmResult = confirmResult;\n        } catch (error) {\n            console.error(error);\n            dispatch(setLoading(false));\n            setErrorAction(t(\"login.error-message.invalid-phone-number\"));\n            setTypeNotification(\"error\");\n        }\n    };\n    const handleVerifyOtpCode = async (otp: string) => {\n        dispatch(setLoading(true));\n\n        if (window.confirmResult) {\n            try {\n                const result = await window.confirmResult.confirm(otp);\n                if (result) {\n                    fnSendRequest();\n                    setErrorAction(\"\");\n                }\n            } catch (error) {\n                console.error(error);\n\n                setErrorAction(t(\"login.error-message.wrong-otp\"));\n                setTypeNotification(\"error\");\n                dispatch(setLoading(false));\n            }\n        }\n    };\n\n    const fnSendRequest = async () => {\n        try {\n            if (firebase.auth()?.currentUser) {\n                const idToken: string =\n                    (await firebase.auth().currentUser?.getIdToken(true)) || \"\";\n                dispatch(getToken({ idToken }));\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    const checkPermissionAccess = (permission: IPermissionType | undefined) => {\n        if (permission === \"ADMIN\" || permission === \"MANAGER\") {\n            setNotification(t(\"login.success-message.login\"));\n            setTimeout(() => {\n                history.push(\"/dashboard/overview\");\n            }, 2500);\n        } else {\n            setNotification(t(\"login.error-message.permission\"));\n            setTypeNotification(\"warning\");\n            removeUserCookies();\n            dispatch(actionRemoveCurrentUser());\n        }\n    };\n\n    useEffect(() => {\n        if (currentUser && Object.keys(currentUser).length) {\n            setUserCookies(currentUser);\n            dispatch(setLoading(false));\n            checkPermissionAccess(currentUser?.userInfo?.permission);\n        }\n    }, [currentUser]);\n\n    return (\n        <div className=\"items-center grid-cols-2 laptop:grid bg-primary\">\n            <div className=\"z-10 grid items-center h-full min-h-screen bg-white\">\n                <div className=\"max-w-lg px-2 mx-auto phone:px-5 font-sfpro leading-none\">\n                    <div className=\"mb-4 text-2xl text-center text-primary laptop:text-left phone:text-3xl\">\n                        <h1 className=\"mb-2 text-3xl font-bold\">\n                            {t(\"login.title\")}\n                        </h1>\n                        <span className=\"block text-lg font-medium leading-normal phone:text-xl\">\n                            {t(\"login.message\")}\n                        </span>\n                    </div>\n                    <div className=\"mb-1 text-black rounded\">\n                        {!isPassPhone ? (\n                            <InputWithIcon\n                                label={t(\"login.phone\")}\n                                key=\"PHONE\"\n                                onChange={newValue => {\n                                    setPhoneNumber(newValue);\n                                }}\n                                minLength={10}\n                                maxLength={11}\n                                initialValue={phoneNumber}\n                                type=\"number\"\n                                className=\"bg-white\"\n                                placeholder={t(\"login.phone\")}\n                                Icon=\"+84\"\n                                onPressEnter={handleLoginPhone}\n                                required\n                                pattern={regexPhoneNumber}\n                            />\n                        ) : (\n                            <InputWithIcon\n                                label={t(\"login.otp\")}\n                                key=\"OPT\"\n                                initialValue={otpCode}\n                                className=\"bg-white\"\n                                Icon=\"\"\n                                type=\"number\"\n                                placeholder={t(\"login.action.otp\")}\n                                onChange={value => {\n                                    setOtpCode(value);\n                                }}\n                                maxLength={6}\n                                onPressEnter={handleVerifyOtpCode}\n                                required\n                            />\n                        )}\n                        {errorAction && (\n                            <span className=\"flex flex-row text-sm text-error\">\n                                <SVG\n                                    name=\"common/error-icon\"\n                                    className=\"mr-0.5 text-error\"\n                                />\n                                {errorAction}\n                            </span>\n                        )}\n                    </div>\n\n                    <div className=\"\">\n                        <Button\n                            onClick={() => {\n                                isPassPhone\n                                    ? handleVerifyOtpCode(otpCode)\n                                    : handleLoginPhone(phoneNumber);\n                            }}\n                            className=\"w-full bg-primary\"\n                        >\n                            {t(\"login.action.login\")}\n                        </Button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"relative self-stretch hidden min-h-screen pr-10 laptop:flex\">\n                <Icons.BackgroundLogin className=\"inline-block mx-auto align-middle\" />\n            </div>\n            <div id=\"captcha\" />\n        </div>\n    );\n};\n\nexport default LoginPage;\n"],"sourceRoot":""}