{"version":3,"sources":["designs/TextArea/styles.tsx","designs/TextArea/index.tsx","designs/Editor/index.tsx","constants/aspect/index.ts","pages/dashboard/Setting/General/index.tsx"],"names":["useStyles","makeStyles","inputFieldHidden","opacity","position","formHelperText","color","colors","error","TextArea","props","className","label","name","value","onChange","required","helpInputText","errorMessage","t","placeholder","rest","validators","classes","id","randomId","useState","text","setText","isError","setIsError","useEffect","TextField","style","width","multiline","rows","variant","event","currentValue","target","FormHelperText","errorMessages","validatorListener","isValid","FontAttributor","Quill","import","fontNames","map","font","toLowerCase","replace","whitelist","register","Size","modules","toolbar","align","list","size","Editor","initValue","disabled","htmlEditor","setHtmlEditor","ASPECT_RATIO_16_9","CONTENT_WEBSITE_ID","CommonSettings","i18n","language","dispatch","useDispatch","contentWebsite","useSelector","state","generalSetting","actionSuccess","common","formField","setFormField","footerInfo1","footerInfo2","footerInfo3","footerInfo4","footerUser","setFooterUser","footerEmployer","setFooterEmployer","getContentWebsiteAPI","resetAction","getContentWebsiteById","setBreadcrumb","whiteLogoValue","whiteLogo","colorLogoValue","colorLogo","photosValue","photos","onSubmit","footerUserInfo","Object","values","footerEmployerInfo","payload","fieldsToUpdate","customSizeImageForWhiteLogo","CUSTOM_SIZE_UPLOAD_PAGE_IMAGE","customSizeImageForColorLogo","updateContentWebsite","image","small","aspect","imageCrop","default","address","phone","validates","matchRegexp","regexp","regexPhoneNumber","customCodeHeader","customCodeFooter","type","primary","innerClassName"],"mappings":"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","file":"static/js/39.61d60306.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core/styles\";\nimport { colors } from \"common/styles/colors\";\n\nexport const useStyles = makeStyles({\n    inputFieldHidden: {\n        opacity: 0,\n        position: \"absolute\",\n    },\n    formHelperText: {\n        color: colors.error,\n    },\n});\n","import React, { useState, useMemo, useEffect } from \"react\";\nimport { TextValidator } from \"react-material-ui-form-validator\";\nimport TextField, { BaseTextFieldProps } from \"@material-ui/core/TextField\";\nimport { randomId } from \"common/functions\";\nimport { t } from \"language\";\nimport { FormHelperText } from \"@material-ui/core\";\nimport { useStyles } from \"./styles\";\n\ninterface ITextAreaProps extends BaseTextFieldProps {\n    label: string;\n    name: string;\n    value?: string;\n    onChange?: (value: string, name?: string) => void;\n    required?: boolean;\n    errorMessage?: string;\n    helpInputText?: string;\n    placeholder?: string;\n}\n\nconst TextArea: React.FC<ITextAreaProps> = props => {\n    const {\n        className = \"\",\n        label,\n        name,\n        value = \"\",\n        onChange,\n        required,\n        helpInputText = \"\",\n        errorMessage = t(\"common.text-area-placeholder\"),\n        placeholder = t(\"common.text-area-placeholder\"),\n        ...rest\n    } = props;\n    const validators = required ? [\"required\"] : [];\n    const classes = useStyles();\n\n    const id = randomId();\n    const [text, setText] = useState(value);\n    const [isError, setIsError] = useState(false);\n\n    useEffect(() => {\n        if (value) {\n            setText(value);\n        } else {\n            setText(\"\");\n        }\n    }, [value]);\n\n    const handleValidate = (isValid: boolean) => {\n        if (isValid) {\n            isError && setIsError(false);\n        } else {\n            !isError && setIsError(true);\n        }\n    };\n\n    const handleChange = (event: any) => {\n        const currentValue = event.target?.value || \"\";\n        if (name) {\n            onChange && onChange(currentValue, name);\n        } else {\n            onChange && onChange(currentValue);\n        }\n        setText(currentValue);\n    };\n\n    return (\n        <>\n            <div className={`text-validator-wrapper ${className}`}>\n                {label && (\n                    <p className=\"text-lg font-medium flex items-center mb-0.5\">\n                        {label}\n                        {required && <span className=\"text-error\">*</span>}\n                        {helpInputText && (\n                            <span className=\"text-sm text-body ml-0.5 \">\n                                {helpInputText}\n                            </span>\n                        )}\n                    </p>\n                )}\n                <TextField\n                    placeholder={placeholder}\n                    className=\"bg-white\"\n                    id={id}\n                    style={{\n                        width: \"100%\",\n                    }}\n                    multiline\n                    rows={8}\n                    variant=\"outlined\"\n                    name={name}\n                    value={text}\n                    onChange={handleChange}\n                    {...(rest as any)}\n                />\n                {isError && (\n                    <FormHelperText\n                        className=\"font-sfpro\"\n                        error\n                        variant=\"outlined\"\n                    >\n                        {errorMessage}\n                    </FormHelperText>\n                )}\n            </div>\n            {required && (\n                <TextValidator\n                    value={text}\n                    name={id}\n                    validators={validators}\n                    errorMessages={[errorMessage]}\n                    className={`${classes.inputFieldHidden} -z-1`}\n                    validatorListener={handleValidate}\n                />\n            )}\n        </>\n    );\n};\n\nexport default TextArea;\n","import { FormControl, FormHelperText } from \"@material-ui/core\";\nimport { randomId } from \"common/functions\";\nimport React, { useEffect, useState } from \"react\";\nimport { TextValidator } from \"react-material-ui-form-validator\";\nimport ReactQuill, { Quill } from \"react-quill\";\nimport { t } from \"language\";\nimport \"react-quill/dist/quill.snow.css\";\n\nconst FontAttributor = Quill.import(\"attributors/class/font\");\nconst fonts = [\"SF Pro Text\"];\nconst fontNames = fonts.map(font => font.toLowerCase().replace(/\\s/g, \"-\"));\nFontAttributor.whitelist = fontNames;\nQuill.register(FontAttributor, true);\n\nconst Size = Quill.import(\"attributors/style/size\");\nconst sizes = [\"14px\", \"16px\", \"18px\", \"22px\"];\nSize.whitelist = sizes;\nQuill.register(Size, true);\n\nconst modules = {\n    toolbar: [\n        [\"bold\", \"italic\", \"underline\"],\n        [{ align: \"\" }, { align: \"center\" }, { align: \"right\" }],\n        [{ list: \"ordered\" }],\n        [\"link\", \"image\"],\n        [{ size: [\"14px\", \"16px\", \"18px\", \"22px\"] }],\n    ],\n};\n\ninterface IEditorProps {\n    initValue?: string;\n    className?: string;\n    label?: string;\n    name?: string;\n    onChange: (text: string, name: string) => void;\n    disabled?: boolean;\n    required?: boolean;\n    errorMessage?: string;\n}\n\nconst Editor: React.FC<IEditorProps> = props => {\n    const {\n        initValue = \"\",\n        onChange,\n        className = \"\",\n        label,\n        name = \"\",\n        disabled = false,\n        required = false,\n        errorMessage = t(\"common.select-required\"),\n    } = props;\n    const validators = required ? [\"required\"] : [];\n\n    const [htmlEditor, setHtmlEditor] = useState<string>(\"\");\n    const [isError, setIsError] = useState(false);\n\n    useEffect(() => {\n        if (initValue) {\n            setHtmlEditor(initValue);\n        } else {\n            setHtmlEditor(\"\");\n        }\n    }, [initValue]);\n\n    const handlerChange = (value: string) => {\n        setHtmlEditor(value);\n        onChange(value, name);\n    };\n\n    const id = randomId();\n    const handleValidate = (isValid: boolean) => {\n        if (isValid) {\n            isError && setIsError(false);\n        } else {\n            !isError && setIsError(true);\n        }\n    };\n\n    return (\n        <>\n            <div className={`quill-wrap ${className}`}>\n                <FormControl\n                    variant=\"outlined\"\n                    className=\"w-full\"\n                    error={isError}\n                    disabled={disabled}\n                >\n                    <span className=\"font-medium text-lg block mb-0.5\">\n                        {label}\n                    </span>\n                    <ReactQuill\n                        modules={modules}\n                        value={htmlEditor}\n                        onChange={handlerChange}\n                    />\n                    {isError && (\n                        <FormHelperText\n                            className=\"font-sfpro\"\n                            error\n                            variant=\"outlined\"\n                        >\n                            {errorMessage}\n                        </FormHelperText>\n                    )}\n                </FormControl>\n            </div>\n            {required && (\n                <TextValidator\n                    value={htmlEditor}\n                    name={id}\n                    className=\"hidden\"\n                    errorMessages={[errorMessage]}\n                    validators={validators}\n                    validatorListener={handleValidate}\n                />\n            )}\n        </>\n    );\n};\n\nexport default Editor;\n","export const ASPECT_RATIO_16_9 = 16 / 9;\n","import React, { useEffect, useState } from \"react\";\nimport i18n, { t } from \"language\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    IContentWebsiteUpdateInput,\n    IRootState,\n    IUpdateContentWebsite,\n} from \"common/formatTypes\";\nimport { resetAction } from \"redux/actions/common\";\nimport { PATH } from \"constants/routes\";\nimport {\n    getContentWebsiteById,\n    updateContentWebsite,\n} from \"redux/actions/generalSetting\";\nimport SingleImageUploader from \"components/SingleImageUploader\";\nimport Input from \"designs/Input\";\nimport { regexEmail, regexPhoneNumber } from \"common/functions\";\nimport Editor from \"designs/Editor\";\nimport { ValidatorForm } from \"react-material-ui-form-validator\";\nimport Button from \"designs/Button\";\nimport { setBreadcrumb } from \"redux/actions/_config\";\nimport TextArea from \"designs/TextArea\";\nimport {\n    CUSTOM_SIZE_UPLOAD_LOGO,\n    CUSTOM_SIZE_UPLOAD_PAGE_IMAGE,\n} from \"constants/image\";\nimport { ASPECT_RATIO_16_9 } from \"constants/aspect\";\n\nconst CONTENT_WEBSITE_ID = \"6108b313c388de2b31947186\";\n\nconst CommonSettings = () => {\n    const { language } = i18n;\n\n    const dispatch = useDispatch();\n    const { contentWebsite } = useSelector(\n        (state: IRootState) => state.generalSetting,\n    );\n    const { actionSuccess } = useSelector((state: IRootState) => state.common);\n\n    const [formField, setFormField] = useState<IContentWebsiteUpdateInput>({});\n    const [footerUser, setFooterUser] = useState<Record<string, string>>({\n        footerInfo1: \"\",\n        footerInfo2: \"\",\n        footerInfo3: \"\",\n        footerInfo4: \"\",\n    });\n    const [footerEmployer, setFooterEmployer] = useState<\n        Record<string, string>\n    >({ footerInfo1: \"\", footerInfo2: \"\", footerInfo3: \"\", footerInfo4: \"\" });\n\n    useEffect(() => {\n        getContentWebsiteAPI();\n    }, []);\n\n    useEffect(() => {\n        if (actionSuccess) {\n            dispatch(resetAction());\n        }\n    }, [actionSuccess]);\n\n    const getContentWebsiteAPI = () => {\n        dispatch(getContentWebsiteById({ id: CONTENT_WEBSITE_ID }));\n    };\n\n    const handleSubmit = () => {\n        const footerUserInfo = Object.values(footerUser);\n        const footerEmployerInfo = Object.values(footerEmployer);\n        const input = {\n            ...formField,\n            footerUserInfo,\n            footerEmployerInfo,\n            customSizeImageForWhiteLogo: CUSTOM_SIZE_UPLOAD_PAGE_IMAGE,\n            customSizeImageForColorLogo: CUSTOM_SIZE_UPLOAD_PAGE_IMAGE,\n        };\n        const payload: IUpdateContentWebsite = {\n            fieldsToUpdate: input,\n            id: CONTENT_WEBSITE_ID,\n        };\n        dispatch(updateContentWebsite(payload));\n    };\n\n    const setupBreadcrumb = () => {\n        dispatch(\n            setBreadcrumb([\n                {\n                    name: t(\"generalSetting.breadcrumb\"),\n                },\n            ]),\n        );\n    };\n\n    useEffect(() => {\n        setupBreadcrumb();\n    }, []);\n\n    const {\n        whiteLogo: whiteLogoValue,\n        colorLogo: colorLogoValue,\n        photos: photosValue,\n    } = contentWebsite;\n\n    return (\n        <div className=\"w-full pb-3\">\n            <h1 className=\"mb-2 font-bold text-xxl\">\n                {t(\"generalSetting.breadcrumb\")}\n            </h1>\n            <ValidatorForm\n                onSubmit={handleSubmit}\n                className=\"mt-3 space-y-2 font-medium font-sfpro\"\n            >\n                <div className=\"grid items-stretch grid-cols-1 gap-2 laptop:grid-cols-2\">\n                    <div>\n                        <p className=\"\">\n                            {t(\"generalSetting.white_logo\")}\n                            <span className=\"text-body\">\n                                {t(\"common.image-help-input\")}\n                            </span>\n                        </p>\n                        <SingleImageUploader\n                            image={whiteLogoValue?.small || \"\"}\n                            onChange={whiteLogo => {\n                                setFormField(state => ({\n                                    ...state,\n                                    whiteLogo,\n                                }));\n                            }}\n                            aspect={ASPECT_RATIO_16_9}\n                            imageCrop={false}\n                        />\n                    </div>\n                    <div>\n                        <p className=\"\">\n                            {t(\"generalSetting.color_logo\")}\n                            <span className=\"text-body\">\n                                {t(\"common.image-help-input\")}\n                            </span>\n                        </p>\n                        <SingleImageUploader\n                            image={colorLogoValue?.small || \"\"}\n                            onChange={colorLogo => {\n                                setFormField(state => ({\n                                    ...state,\n                                    colorLogo,\n                                }));\n                            }}\n                            aspect={ASPECT_RATIO_16_9}\n                        />\n                    </div>\n                    <div>\n                        <p className=\"\">\n                            {t(\"generalSetting.main_img\")}\n                            <span className=\"text-body\">\n                                {t(\"common.image-help-input\")}\n                            </span>\n                        </p>\n                        <SingleImageUploader\n                            image={photosValue?.small || photosValue?.default}\n                            onChange={photos => {\n                                setFormField(state => ({\n                                    ...state,\n                                    photos,\n                                }));\n                            }}\n                            aspect={1}\n                        />\n                    </div>\n                </div>\n                <div className=\"grid items-stretch grid-cols-1 gap-2 laptop:grid-cols-2\">\n                    <Input\n                        label={t(\"common.address\")}\n                        value={contentWebsite?.address}\n                        name=\"address\"\n                        onChange={address => {\n                            setFormField(state => ({\n                                ...state,\n                                address,\n                            }));\n                        }}\n                    />\n                    <Input\n                        label={t(\"common.phone-number\")}\n                        value={contentWebsite?.phone}\n                        name=\"phoneNumber\"\n                        onChange={phone => {\n                            setFormField(state => ({\n                                ...state,\n                                phone,\n                            }));\n                        }}\n                        validates={{\n                            matchRegexp: {\n                                regexp: regexPhoneNumber,\n                                errorMessage: t(\"common.validate-phone\"),\n                            },\n                        }}\n                    />\n                </div>\n                <div className=\"grid grid-cols-1 gap-2 laptop:grid-cols-2\">\n                    <div>\n                        <p className=\"mb-1 text-lg font-medium text-black\">\n                            {t(\"generalSetting.footer_user_1\")}\n                        </p>\n                        <Editor\n                            initValue={contentWebsite?.footerUserInfo?.[0]}\n                            onChange={footerInfo1 => {\n                                setFooterUser(state => ({\n                                    ...state,\n                                    footerInfo1,\n                                }));\n                            }}\n                        />\n                    </div>\n                    <div>\n                        <p className=\"mb-1 text-lg font-medium text-black\">\n                            {t(\"generalSetting.footer_user_2\")}\n                        </p>\n                        <Editor\n                            initValue={contentWebsite?.footerUserInfo?.[1]}\n                            onChange={footerInfo2 => {\n                                setFooterUser(state => ({\n                                    ...state,\n                                    footerInfo2,\n                                }));\n                            }}\n                        />\n                    </div>\n                    <div>\n                        <p className=\"mb-1 text-lg font-medium text-black\">\n                            {t(\"generalSetting.footer_user_3\")}\n                        </p>\n                        <Editor\n                            initValue={contentWebsite?.footerUserInfo?.[2]}\n                            onChange={footerInfo3 => {\n                                setFooterUser(state => ({\n                                    ...state,\n                                    footerInfo3,\n                                }));\n                            }}\n                        />\n                    </div>\n                    <div>\n                        <p className=\"mb-1 text-lg font-medium text-black\">\n                            {t(\"generalSetting.footer_user_4\")}\n                        </p>\n                        <Editor\n                            initValue={contentWebsite?.footerUserInfo?.[3]}\n                            onChange={footerInfo4 => {\n                                setFooterUser(state => ({\n                                    ...state,\n                                    footerInfo4,\n                                }));\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"grid grid-cols-1 gap-2 laptop:grid-cols-2\">\n                    <div>\n                        <p className=\"mb-1 text-lg font-medium text-black\">\n                            {t(\"generalSetting.footer_employer_1\")}\n                        </p>\n                        <Editor\n                            initValue={contentWebsite?.footerEmployerInfo?.[0]}\n                            onChange={footerInfo1 => {\n                                setFooterEmployer(state => ({\n                                    ...state,\n                                    footerInfo1,\n                                }));\n                            }}\n                        />\n                    </div>\n                    <div>\n                        <p className=\"mb-1 text-lg font-medium text-black\">\n                            {t(\"generalSetting.footer_employer_2\")}\n                        </p>\n                        <Editor\n                            initValue={contentWebsite?.footerEmployerInfo?.[1]}\n                            onChange={footerInfo2 => {\n                                setFooterEmployer(state => ({\n                                    ...state,\n                                    footerInfo2,\n                                }));\n                            }}\n                        />\n                    </div>\n                    <div>\n                        <p className=\"mb-1 text-lg font-medium text-black\">\n                            {t(\"generalSetting.footer_employer_3\")}\n                        </p>\n                        <Editor\n                            initValue={contentWebsite?.footerEmployerInfo?.[2]}\n                            onChange={footerInfo3 => {\n                                setFooterEmployer(state => ({\n                                    ...state,\n                                    footerInfo3,\n                                }));\n                            }}\n                        />\n                    </div>\n                    <div>\n                        <p className=\"mb-1 text-lg font-medium text-black\">\n                            {t(\"generalSetting.footer_employer_4\")}\n                        </p>\n                        <Editor\n                            initValue={contentWebsite?.footerEmployerInfo?.[3]}\n                            onChange={footerInfo4 => {\n                                setFooterEmployer(state => ({\n                                    ...state,\n                                    footerInfo4,\n                                }));\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"grid grid-cols-1 gap-2 laptop:grid-cols-2\">\n                    <div>\n                        <p className=\"mb-1 text-lg font-medium text-black\">\n                            {t(\"generalSetting.custom_code_header\")}\n                        </p>\n                        <TextArea\n                            label=\"\"\n                            name=\"customCodeHeader\"\n                            value={contentWebsite?.customCodeHeader}\n                            onChange={customCodeHeader => {\n                                setFormField(state => ({\n                                    ...state,\n                                    customCodeHeader,\n                                }));\n                            }}\n                        />\n                    </div>\n                    <div>\n                        <p className=\"mb-1 text-lg font-medium text-black\">\n                            {t(\"generalSetting.custom_code_footer\")}\n                        </p>\n                        <TextArea\n                            label=\"\"\n                            name=\"customCodeFooter\"\n                            value={contentWebsite?.customCodeFooter}\n                            onChange={customCodeFooter => {\n                                setFormField(state => ({\n                                    ...state,\n                                    customCodeFooter,\n                                }));\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"flex justify-end\">\n                    <Button\n                        type=\"submit\"\n                        primary\n                        className=\"w-13\"\n                        innerClassName=\"font-medium h-5 w-full\"\n                    >\n                        {t(\"common.confirm\")}\n                    </Button>\n                </div>\n            </ValidatorForm>\n        </div>\n    );\n};\n\nexport default CommonSettings;\n"],"sourceRoot":""}